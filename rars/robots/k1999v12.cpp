/////////////////////////////////////////////////////////////////////////////
//
// Filename      : k1999v12.cpp
// Full name     : Remi Coulom
// e-mail adress : Remi.Coulom@imag.fr
// Robot's name  : K1999 and K2001
// Race          : all
// Confidential  : no
// Data file     : none
// K1999 Color   : black, black
// K2001 Color   : green, yellow
//
/////////////////////////////////////////////////////////////////////////////

#ifndef WIN32
  #include <cmath>
  #include <iostream>
  #include <iomanip>
  #include <fstream>
  #include <strstream>
  #include <cstdlib>
  #include <string>

  using namespace std;
#else
  #include <cstdlib>
  #include <iostream>
  #include <strstrea.h>
  #include <string>
#endif

#include "car.h"
#include "track.h"
#include "os.h"
// extern Car* pcar[]; // To know if the other is in the pits

/////////////////////////////////////////////////////////////////////////////
// Parameters
/////////////////////////////////////////////////////////////////////////////
static const int Iterations = 150;     // Number of smoothing operations

static const double SecurityR = 200.0; // Security radius
static double SideDistExt = 4.0; // Security distance wrt outside
static double SideDistInt = 0.5; // Security distance wrt inside

//
// These compilation options are used to dump info during development
//
//#define WRITE_FILES
//#define LOG_DATA
#define VERBOSE
//#define OPTIMIZE

/////////////////////////////////////////////////////////////////////////////
// Pre-computed track-specific data
/////////////////////////////////////////////////////////////////////////////
class CTrackData // td
{
 public:
  const char *pszName;
  double Speed;
  int surface;
  const char *pszControlPoints;
};

CTrackData ttd[] = 
{
 {"random.trk", 1.00, 0, ""},
 {"random.trk", 1.00, 1, ""},
 {"random.trk", 1.00, 2, ""}
#if 1
,{"aalborg.trk", 68.841, 1, " 0 0.0711198 8 0.138932 16 0.121257 32 0.0698887 40 0.0723352 48 0.210258 56 0.65621 64 0.972813 80 0.086513 88 0.128425 96 0.443202 104 0.850056 112 0.899788 120 0.502811 192 0.550116 240 0.698991 256 0.242985 264 0.391611 272 0.939795 280 0.841986 288 0.245821 304 0.110809 312 0.23899 320 0.414022 328 0.592192 336 0.742873 352 0.928117 376 0.97206 384 0.932811 392 0.838999 400 0.68838 408 0.491409 416 0.297321 424 0.165195 432 0.0886417 440 0.0700171 448 0.170464 456 0.57385 472 0.459204 480 0.284726 512 0.889946 520 0.721613 536 0.183504 552 0.74795 568 0.826496 576 0.578075 584 0.270248 592 0.106769 600 0.133938 608 0.323874 616 0.625366 624 0.798925 640 0.108755 648 0.156339 656 0.644614 664 0.880372 672 0.984107 680 0.972219 688 0.863811 696 0.650867 704 0.364757 712 0.125869 736 0.137052 744 0.649634 752 0.97243 760 0.34066 768 0.0783153 776 0.0637213 784 0.256001 792 0.52598 800 0.728736 808 0.869332 816 0.925711 824 0.617064 832 0.226502 840 0.0395853"}
,{"adelaide.trk", 89.9752, 1, " 0 0.528543 8 0.138368 16 0.0524701 24 0.0820743 32 0.151871 40 0.24049 48 0.342597 56 0.45767 64 0.578852 80 0.776131 88 0.850201 96 0.904994 104 0.936536 112 0.935935 120 0.898373 128 0.821888 136 0.701855 144 0.533862 152 0.311678 160 0.0519879 168 0.0554092 176 0.43679 192 0.879175 200 0.68527 216 0.157595 256 0.283529 264 0.242019 280 0.102526 288 0.0632064 296 0.0592993 304 0.180431 312 0.573364 320 0.980209 336 0.489752 344 0.432689 352 0.499088 360 0.320956 376 0.149775 384 0.581321 408 0.5446 416 0.896805 432 0.519635 448 0.0529087 456 0.099991 464 0.226086 472 0.395472 480 0.546678 504 0.305248 520 0.0502028 528 0.391243 536 0.88542 544 0.922001 552 0.636256 560 0.485093 568 0.586093 576 0.906103 592 0.776364 608 0.0940779 632 0.0542964 640 0.0575822 648 0.077066 656 0.12648 672 0.314885 680 0.469968 688 0.685812 704 0.962229 720 0.868622 736 0.438285 752 0.145795 760 0.0836035 768 0.0579787 784 0.0688488 800 0.117927 808 0.145084 816 0.167816 832 0.190059 840 0.192392 856 0.191012 872 0.186999 880 0.185432 888 0.184517 896 0.183211 912 0.179269 920 0.174191 928 0.159235 944 0.115995 984 0.0657834 992 0.243231 1000 0.793331 1016 0.701743 1024 0.166335 1032 0.0558333 1040 0.121169 1048 0.237028 1056 0.299495 1064 0.298391 1072 0.218973 1080 0.0477395 1104 0.490536 1120 0.796862 1136 0.909264 1144 0.940232 1152 0.928679 1168 0.762437 1176 0.722506 1184 0.745628 1200 0.661001 1208 0.543542 1216 0.375439 1224 0.183952 1232 0.0716267 1240 0.0845926 1248 0.321905 1256 0.818418 1264 0.989885"}
,{"anew.trk", 103.1, 1, " 40 0.961619 64 0.940975 104 0.91211 112 0.909724 128 0.909211 136 0.910856 144 0.916152 152 0.922952 160 0.931976 168 0.939524 192 0.961622 200 0.966548 216 0.960853 224 0.916692 232 0.807935 240 0.612374 248 0.322445 256 0.122834 264 0.0243614 288 0.267843 304 0.771193 320 0.939167 336 0.954368 352 0.632228 360 0.537157 384 0.508631 416 0.964871 432 0.517905 448 0.0608168 480 0.489691 496 0.849979 504 0.933196 512 0.964478 528 0.91828 544 0.76354 560 0.632421 576 0.713714 592 0.815856 608 0.875097 616 0.893612 624 0.910383 640 0.928397 664 0.938677 672 0.939781 688 0.96119 712 0.943837 720 0.880251 728 0.753016 736 0.545103 744 0.229312 752 0.0402127 768 0.124439 784 0.711904 800 0.956464 816 0.963438 824 0.962196 848 0.827337 864 0.374737 872 0.151791 880 0.0453745 912 0.0314263 928 0.269854 968 0.714438 976 0.672268 992 0.879378 1040 0.321634 1056 0.115302 1088 0.253419 1104 0.544476 1120 0.931347 1136 0.905535 1168 0.524029 1184 0.738308 1200 0.915899 1232 0.98943 1248 0.976943 1280 0.852525 1296 0.740071 1304 0.744898 1312 0.80345 1320 0.853749 1328 0.849166 1336 0.787755 1344 0.66732 1352 0.477006 1360 0.257052 1376 0.0436186 1432 0.0640083 1440 0.144216"}
,{"austria.trk", 94.8011, 1, " 48 0.140982 64 0.165806 72 0.173678 80 0.178265 88 0.181853 104 0.187106 120 0.171654 128 0.144298 136 0.109591 176 0.0967188 184 0.293063 192 0.693907 224 0.0926171 232 0.049829 240 0.0876158 256 0.258562 272 0.48412 280 0.605476 304 0.877585 320 0.916918 336 0.836405 352 0.661279 368 0.468768 376 0.359371 384 0.232519 392 0.0977801 400 0.0256143 408 0.00803737 416 0.0434856 432 0.121894 440 0.120122 448 0.107413 456 0.0868999 472 0.0572549 480 0.0496534 504 0.987703 512 0.758641 520 0.329229 528 0.0927155 544 0.0687338 552 0.0891183 560 0.122799 568 0.157123 576 0.182343 584 0.187804 592 0.17507 608 0.156968 624 0.149115 640 0.148511 648 0.153195 656 0.162567 664 0.168287 672 0.16403 680 0.144772 688 0.0960136 696 0.033966 704 0.048228 712 0.0657591 720 0.0643628 744 0.0625602 752 0.192759 760 0.561164 768 0.884846 784 0.883825 800 0.162789 816 0.11161 824 0.227884 832 0.377734 840 0.525923 848 0.659868 864 0.845002 888 0.94697 904 0.790067 912 0.562614 920 0.277856 928 0.113706 936 0.0324013 968 0.296792 976 0.593042 992 0.946678 1000 0.950374 1024 0.548766 1032 0.242311 1040 0.0623866 1064 0.339674 1072 0.681598 1080 0.874184 1088 0.950862 1096 0.989958 1104 0.985128 1112 0.934203 1120 0.82754 1128 0.651226 1136 0.433532 1144 0.279179 1152 0.18279 1160 0.127855 1168 0.0983419 1176 0.0828433 1184 0.0741008 1200 0.0661786 1216 0.0565887 1248 0.0550214 1256 0.124908 1264 0.308787 1272 0.643081 1296 0.667636 1312 0.172377 1320 0.059527 1328 0.0495226 1336 0.12123 1344 0.39976 1376 0.267611 1384 0.114719 1392 0.0553454"}
,{"barcelon.trk", 93.3667, 1, " 0 0.28919 16 0.0543831 32 0.0656992 48 0.11126 64 0.160583 80 0.20503 96 0.2396 128 0.275154 136 0.278137 160 0.268108 176 0.247582 192 0.21676 208 0.191559 216 0.177831 232 0.148201 240 0.132441 248 0.109808 256 0.0876777 264 0.0705859 272 0.0583226 288 0.0499187 296 0.0612918 304 0.147156 312 0.347284 320 0.685596 344 0.911532 352 0.655216 360 0.236055 368 0.0417258 376 0.0149408 384 0.149024 392 0.393363 416 0.873066 464 0.928316 480 0.81674 496 0.624327 512 0.483744 520 0.419057 528 0.346773 536 0.257137 544 0.146103 552 0.0792711 560 0.0545183 576 0.0516718 592 0.0555262 600 0.116782 608 0.219095 616 0.325543 624 0.48317 632 0.769148 736 0.950466 744 0.887307 752 0.674912 760 0.288248 768 0.0717892 784 0.045747 792 0.254565 800 0.659599 808 0.884215 824 0.936657 832 0.908287 840 0.89345 848 0.897058 856 0.927556 872 0.937836 880 0.87366 896 0.545192 904 0.261275 936 0.291421 944 0.643361 960 0.925338 976 0.384068 992 0.0676794 1008 0.148543 1024 0.469056 1032 0.640211 1040 0.826025 1056 0.979071 1072 0.557842 1088 0.103074 1104 0.0585899 1120 0.143988 1136 0.285643 1152 0.455515 1168 0.653841 1176 0.751508 1184 0.811365 1200 0.942278 1208 0.941253 1216 0.872158 1224 0.716138 1232 0.458811 1240 0.271273 1248 0.130591 1264 0.0881325 1272 0.250434 1280 0.0868981 1312 0.455059 1336 0.758574 1344 0.831791 1352 0.901046 1360 0.987367 1376 0.962439 1384 0.899268 1392 0.734806 1408 0.194468 1424 0.0829559 1432 0.247558 1440 0.530368 1456 0.803066 1472 0.634199 1488 0.350802 1504 0.0695414 1512 0.0585227 1520 0.154396 1536 0.699866 1552 0.990901 1576 0.801641"}
,{"brands.trk", 96.0389, 1, " 0 0.182261 8 0.0828608 24 0.0556529 40 0.059707 48 0.0575608 64 0.0615697 80 0.0675387 88 0.151914 96 0.288319 104 0.401377 112 0.492465 128 0.660593 160 0.979349 176 0.712817 192 0.189177 208 0.0624276 216 0.101639 224 0.0850266 256 0.0573961 264 0.14392 272 0.387576 280 0.80781 288 0.965639 304 0.911893 312 0.541308 320 0.144161 336 0.15071 344 0.102348 352 0.0151644 368 0.10752 384 0.281689 400 0.43711 416 0.684006 424 0.856789 432 0.939184 448 0.945911 464 0.922946 472 0.797962 480 0.553057 496 0.106592 504 0.0267126 512 0.0182158 520 0.0419561 528 0.0410593 552 0.281706 560 0.656322 568 0.888065 576 0.947118 584 0.942221 592 0.935143 600 0.946705 608 0.983446 616 0.988831 624 0.953243 632 0.863808 640 0.744571 648 0.634746 656 0.525989 672 0.317149 680 0.220259 688 0.138874 696 0.082226 712 0.093482 720 0.216762 728 0.434953 736 0.666507 752 0.930817 768 0.981523 784 0.80793 800 0.373513 816 0.0704668 832 0.0534496 840 0.104216 848 0.250122 864 0.817233 880 0.964338 896 0.705775 960 0.937755 976 0.65866 992 0.831193 1008 0.878159 1016 0.578051 1032 0.529622 1040 0.872765 1056 0.924277 1064 0.90761 1088 0.573432 1096 0.156004 1120 0.496441 1128 0.823808 1152 0.787017 1184 0.0778921 1200 0.147789 1216 0.696684 1224 0.907097 1232 0.989434 1256 0.80878 1280 0.687294 1296 0.614788 1312 0.510615 1328 0.345832"}
,{"brazil.trk", 84.052, 1, " 0 0.668308 16 0.758753 24 0.783145 32 0.800409 40 0.808716 48 0.813365 56 0.818967 64 0.829685 72 0.834327 80 0.839554 88 0.842067 128 0.906216 144 0.933617 152 0.894314 160 0.767141 168 0.440283 176 0.100423 184 0.0133819 216 0.724361 224 0.983462 240 0.396544 248 0.108502 256 0.131502 264 0.334404 280 0.408932 288 0.171077 296 0.0490428 304 0.0119927 320 0.153695 336 0.781943 344 0.92626 352 0.92981 360 0.911158 368 0.882257 384 0.806579 400 0.724606 416 0.667331 424 0.646339 432 0.630036 440 0.618636 448 0.611781 456 0.609643 464 0.613143 472 0.62368 480 0.64857 488 0.678766 496 0.711019 528 0.837908 544 0.91378 560 0.918568 568 0.713133 576 0.18891 592 0.243142 600 0.794283 608 0.927737 616 0.72173 624 0.226317 632 0.0838366 640 0.4272 648 0.70014 656 0.844724 664 0.898223 672 0.886611 680 0.834883 688 0.760402 704 0.576957 720 0.386036 736 0.185895 744 0.0992321 752 0.0677258 760 0.0755457 768 0.162062 776 0.401996 784 0.756962 816 0.65365 832 0.0820503 840 0.0688158 856 0.296588 864 0.676617 872 0.916589 880 0.985985 888 0.987162 896 0.988223 912 0.865296 920 0.609411 928 0.488859 936 0.30474 944 0.057171 968 0.0232085 976 0.15931 984 0.545098 1000 0.987001 1008 0.824049 1016 0.475968 1024 0.236515 1048 0.176817 1056 0.590084 1064 0.937467 1080 0.873326 1088 0.383049 1096 0.0822804 1104 0.143189 1136 0.175398 1168 0.474065 1176 0.837005 1184 0.934809 1192 0.930675 1216 0.920161 1224 0.751791 1232 0.233877 1280 0.930841 1288 0.892278 1296 0.763078 1304 0.571011 1312 0.409308 1328 0.165873 1344 0.0349249 1360 0.039584 1376 0.207635 1392 0.573247 1400 0.792828 1408 0.907999 1424 0.891292 1432 0.801262"}
,{"buenos.trk", 83.771, 1, " 0 0.188779 8 0.35056 16 0.453854 24 0.514647 32 0.543717 40 0.552529 48 0.550624 64 0.532861 80 0.502785 96 0.461664 104 0.434247 112 0.39729 128 0.295429 136 0.234141 152 0.123186 168 0.0672571 184 0.0755876 192 0.166793 200 0.421805 208 0.836142 224 0.986113 320 0.870937 344 0.941247 352 0.932328 360 0.7781 368 0.366335 376 0.0808478 384 0.00921238 392 0.0360314 400 0.242854 408 0.709001 416 0.924449 432 0.939107 448 0.921149 488 0.108372 496 0.425916 504 0.8573 512 0.929553 520 0.764557 528 0.598505 536 0.572738 544 0.695344 552 0.892483 560 0.976653 568 0.989731 576 0.977647 584 0.974261 592 0.984557 600 0.990506 608 0.951739 624 0.595175 640 0.0843298 656 0.0587746 664 0.068848 672 0.0831124 680 0.0922498 688 0.099802 696 0.10559 712 0.102881 720 0.0925319 744 0.0641625 752 0.14666 768 0.576809 776 0.761642 800 0.98852 832 0.54864 848 0.130194 856 0.0601097 872 0.0731765 880 0.148586 888 0.326283 896 0.64423 904 0.93173 912 0.990552 928 0.974693 936 0.816401 944 0.38867 952 0.107219 960 0.0572198 976 0.404285 992 0.908021 1000 0.660187 1008 0.222889 1024 0.127719 1032 0.59049 1056 0.591374 1064 0.182097 1072 0.0170518 1088 0.411882 1096 0.809587 1104 0.939123 1112 0.936237 1120 0.91613 1136 0.911713 1152 0.937579 1168 0.943367 1176 0.87772 1184 0.566387 1192 0.0747849 1200 0.0345511 1208 0.42593 1216 0.84752 1232 0.62074 1248 0.0571545 1264 0.171587 1272 0.0796103 1280 0.057004 1296 0.0647452 1304 0.0674733 1312 0.068768 1328 0.062088 1336 0.0568755 1344 0.0968797 1352 0.231148 1360 0.490957 1368 0.833164 1376 0.967029 1400 0.966539 1408 0.83388 1416 0.52124 1424 0.175672 1432 0.0611164 1440 0.0694382 1448 0.104923 1456 0.121866 1464 0.0798201 1472 0.0124683 1480 0.0371683"}
,{"clkwis.trk", 91.6146, 1, " 0 0.733506 16 0.217675 32 0.0417347 48 0.0432015 56 0.0877431 64 0.193516 72 0.395742 80 0.675584 96 0.938291 104 0.981712 128 0.870092 144 0.391737 152 0.154054 160 0.0516566 176 0.0424515 184 0.0444697 192 0.0456539 200 0.0442901 208 0.0457982 224 0.0402293 232 0.080886 240 0.19857 248 0.401964 256 0.690013 264 0.887297 272 0.975497 280 0.992934 288 0.963736 304 0.761865 336 0.992477 344 0.932864 352 0.676553 376 0.308709 384 0.797407 392 0.979162"}
,{"cstlcomb.trk", 108.523, 1, " 0 0.600446 16 0.119604 32 0.0546518 56 0.0922853 64 0.11852 72 0.164686 80 0.238429 88 0.350786 96 0.512832 112 0.936532 128 0.8863 144 0.576865 160 0.44774 176 0.460585 192 0.581113 200 0.665774 208 0.762439 224 0.968121 248 0.653178 256 0.359071 272 0.0136927 280 0.0366432 288 0.178365 296 0.374252 304 0.691868 312 0.895834 320 0.980042 336 0.869833 352 0.227894 360 0.0680699 384 0.0590731 416 0.0917313 424 0.0988287 432 0.103991 448 0.102203 464 0.0748712 480 0.0526191 496 0.0761184 512 0.344408 560 0.369394 568 0.194227 592 0.0668206 600 0.0938066 608 0.08418 616 0.0732707 624 0.0645534 640 0.0415915 648 0.0239484 656 0.0161623 672 0.0964445 680 0.220035 688 0.435055 704 0.778644 712 0.905614 736 0.585708 752 0.0758558 768 0.062444 776 0.0865255 784 0.127377 792 0.180502 816 0.376029 824 0.451104 832 0.530658 840 0.613955 848 0.704616 856 0.807435 864 0.925752 880 0.882442 896 0.535334 912 0.278253 920 0.165651 928 0.0976692 936 0.0643276 952 0.069717 960 0.184729 968 0.427701 976 0.770252 984 0.95808"}
,{"doningtn.trk", 91.7165, 1, " 0 0.46736 8 0.865066 16 0.951214 32 0.903016 64 0.684688 88 0.483273 96 0.417721 104 0.353639 112 0.290236 120 0.228345 128 0.170685 144 0.0822537 152 0.0605968 168 0.0656694 176 0.210557 184 0.510806 192 0.814438 208 0.938388 216 0.626997 224 0.236772 248 0.262481 256 0.455744 272 0.777444 280 0.885116 288 0.949018 304 0.986811 320 0.953898 328 0.906667 344 0.627852 352 0.393683 368 0.0900963 432 0.268483 448 0.715891 480 0.379993 496 0.0601506 520 0.141283 544 0.0586115 576 0.792102 592 0.751315 608 0.345221 616 0.103798 632 0.0521608 640 0.122727 648 0.243878 656 0.460081 664 0.683016 672 0.920827 704 0.0948099 736 0.04973 760 0.0559783 768 0.14713 784 0.793892 800 0.944801 816 0.969613 832 0.926351 848 0.517709 864 0.0913962 880 0.0617509 896 0.144549 912 0.275331 928 0.429494 936 0.511008 944 0.591499 952 0.671765 960 0.746995 968 0.814319 976 0.873543 984 0.913439 1008 0.934687 1016 0.847438 1024 0.632522 1072 0.302269 1088 0.051657 1104 0.053344 1112 0.0545801 1120 0.0477408 1128 0.0336986 1136 0.0509198 1144 0.0787392 1152 0.0877669 1168 0.0636963 1192 0.274161 1200 0.733879 1208 0.972158 1216 0.963098 1224 0.55424 1232 0.139217 1240 0.04875 1248 0.0850393 1256 0.162191 1264 0.250593 1272 0.355942 1280 0.475477 1312 0.952159 1328 0.859023 1344 0.105664"}
,{"elev2.trk", 92.5744, 1, " 0 0.430245 8 0.29038 16 0.196191 24 0.132663 48 0.0805302 56 0.0944495 80 0.136588 88 0.149212 104 0.171075 112 0.179224 128 0.179723 136 0.173616 144 0.16445 160 0.134868 176 0.0983259 192 0.0721581 200 0.0614999 224 0.0699875 232 0.312717 240 0.914616 248 0.969691 256 0.295394 264 0.00871924 272 0.172166 280 0.784784 288 0.944235 296 0.938967 384 0.339469 400 0.149278 424 0.106247 432 0.222767 440 0.4648 448 0.835172 456 0.978962 472 0.987971 480 0.868803 488 0.496999 496 0.299261 504 0.228044 512 0.0660445 552 0.0106212 560 0.0106452 576 0.0425748 592 0.409134 608 0.918974 616 0.925683 624 0.819682 640 0.902732 672 0.852726 688 0.480202 704 0.197018 712 0.117128 752 0.0510919 784 0.073128 800 0.152759 808 0.219986 816 0.316478 832 0.661478 840 0.901239 848 0.988704 864 0.612599 872 0.193396 880 0.0320553 896 0.0473987 904 0.199871 912 0.486105 928 0.919938 936 0.987062 944 0.961483 952 0.838638 968 0.275892 976 0.0827678 1008 0.108275 1024 0.629322 1040 0.941551 1064 0.848961 1072 0.661398 1080 0.234723 1088 0.00883732 1096 0.311545 1104 0.68672 1112 0.726255 1120 0.619192 1152 0.964324 1160 0.666281 1168 0.382781 1176 0.196497 1184 0.0906603 1200 0.0652415 1208 0.113546 1216 0.181911 1224 0.258754 1232 0.336112 1248 0.482982 1256 0.549189 1280 0.611372 1288 0.597994 1296 0.577769 1312 0.535982 1328 0.472394 1336 0.426365 1344 0.370288 1360 0.239967 1368 0.172829 1376 0.112459 1408 0.121062 1456 0.838512 1464 0.0748708 1488 0.371983 1496 0.413661 1520 0.675392 1560 0.683242 1568 0.593744 1600 0.294698 1640 0.0629795 1648 0.178994 1656 0.440582 1664 0.748409 1672 0.905689 1680 0.974136 1696 0.955689 1712 0.0745774 1728 0.621603 1736 0.897502 1784 0.962817 1792 0.934576 1800 0.893927 1808 0.835073 1824 0.686192"}
,{"estoril.trk", 90.7967, 1, " 0 0.30614 8 0.13314 16 0.0576395 32 0.0592188 40 0.0745115 64 0.133306 80 0.17781 96 0.221673 112 0.275403 128 0.347637 136 0.383317 144 0.412236 160 0.432522 168 0.427561 184 0.398925 192 0.373798 208 0.30772 224 0.228441 232 0.18474 240 0.134586 248 0.088939 256 0.0579752 272 0.0636402 280 0.126763 288 0.251096 296 0.457412 304 0.7044 320 0.961379 336 0.966414 352 0.739317 368 0.262357 384 0.0496147 400 0.257553 416 0.766566 448 0.905408 464 0.482628 480 0.0778009 512 0.0496164 520 0.0826704 528 0.233824 536 0.594276 544 0.873044 552 0.977442 560 0.98808 568 0.887013 576 0.574812 584 0.323412 592 0.320497 608 0.812073 616 0.943926 624 0.880048 632 0.456808 640 0.0776402 656 0.258726 664 0.779604 672 0.94172 680 0.943071 688 0.913324 704 0.81943 712 0.790633 720 0.790713 728 0.855844 736 0.96479 744 0.989568 752 0.918754 760 0.796336 768 0.729472 776 0.702904 784 0.700493 800 0.739254 832 0.886513 848 0.941926 864 0.915377 872 0.826911 880 0.660611 888 0.355992 896 0.0750056 912 0.0104392 920 0.00884392 928 0.0819533 936 0.327469 944 0.735038 952 0.924519 960 0.944173 968 0.885755 976 0.787155 984 0.666349 992 0.525547 1000 0.369136 1008 0.242779 1016 0.149744 1024 0.0614555 1040 0.130976 1048 0.336336 1056 0.690794 1064 0.907143 1072 0.98724 1120 0.053644 1136 0.0629133 1152 0.0711038 1192 0.636177 1200 0.324397 1216 0.164775 1232 0.593474 1264 0.692236 1272 0.249388 1288 0.149929 1296 0.609883 1304 0.830738 1312 0.884336 1328 0.990387 1360 0.853766 1376 0.849865 1392 0.918464 1408 0.979928 1424 0.967756 1440 0.832743"}
,{"figure8.trk", 91.5713, 1, " 0 0.332592 16 0.0562449 24 0.0555432 32 0.12955 40 0.26187 48 0.409757 64 0.493774 72 0.416117 80 0.258162 96 0.0431596 128 0.0143196 160 0.00887102 192 0.0323637 200 0.02688 208 0.0159832 224 0.0192928 232 0.0555258 256 0.399184 264 0.620026 296 0.90176 304 0.787972 320 0.55315 336 0.599405 344 0.738753 352 0.882825 368 0.989504 384 0.990419 392 0.986883 416 0.992565 432 0.992512 480 0.992064 512 0.769579"}
,{"fiorano.trk", 79.2228, 1, " 0 0.894268 8 0.806524 16 0.745315 32 0.661881 40 0.637583 48 0.633101 64 0.676027 80 0.762049 88 0.81114 96 0.860825 104 0.905732 112 0.938782 120 0.947971 152 0.676134 192 0.110899 224 0.803954 232 0.207132 264 0.434903 280 0.928566 288 0.984588 312 0.967229 320 0.86796 328 0.640578 336 0.426668 344 0.114813 368 0.206877 384 0.415432 400 0.572214 416 0.374064 432 0.512247 440 0.667795 448 0.74001 456 0.823846 464 0.987586 472 0.916668 480 0.542204 488 0.143786 496 0.04875 504 0.0528913 512 0.052686 528 0.0507824 536 0.05125 544 0.0768464 552 0.24064 560 0.621735 568 0.933464 584 0.792355 592 0.362396 600 0.101701 608 0.055471 616 0.121331 624 0.24707 632 0.435565 640 0.681351 648 0.848134 656 0.938348 664 0.905106 672 0.657335 696 0.580258 704 0.916053 712 0.964235 720 0.980005 728 0.98565 736 0.986632 752 0.93982 760 0.867412 768 0.731522 776 0.5088 784 0.218961 792 0.0496686 800 0.00890773 808 0.0880762 816 0.303763 832 0.810612 848 0.942008 856 0.950044 880 0.966987 896 0.962227 912 0.798779 920 0.164268 928 0.0148881 936 0.305483 944 0.535238 952 0.811547 960 0.946647 968 0.948071 976 0.973667 984 0.992924"}
,{"hungary.trk", 87.8199, 1, " 16 0.0567838 32 0.0648269 48 0.0807612 64 0.0971221 80 0.104243 96 0.103761 104 0.102893 112 0.100894 120 0.0968449 128 0.0877548 136 0.0750294 152 0.0603324 160 0.0624798 168 0.119745 176 0.246252 184 0.465213 192 0.778582 200 0.952396 208 0.991809 216 0.958105 224 0.914759 232 0.906171 240 0.939733 248 0.98153 256 0.987532 264 0.92319 272 0.758608 280 0.590811 288 0.618391 296 0.720065 304 0.669145 312 0.42502 320 0.111143 328 0.019668 336 0.00874532 344 0.0730212 352 0.326071 360 0.755458 368 0.932093 376 0.918027 384 0.927624 392 0.99221 400 0.899464 408 0.616356 416 0.318792 424 0.14392 432 0.0662799 440 0.0632498 448 0.107231 456 0.18019 464 0.270717 480 0.485859 488 0.597559 496 0.725012 512 0.989606 528 0.806007 536 0.556711 544 0.16758 560 0.261472 576 0.648351 592 0.635019 600 0.759571 608 0.920448 616 0.982628 648 0.984248 656 0.939674 664 0.833382 672 0.641722 680 0.342398 688 0.120535 720 0.0754469 736 0.477285 752 0.991117 768 0.398123 784 0.205465 792 0.487451 800 0.650371 808 0.664775 816 0.489284 824 0.129385 840 0.171728 848 0.49984 856 0.685841 864 0.915319 880 0.930655 896 0.336977 904 0.103197 912 0.0626577 920 0.156225 928 0.163344 936 0.0416553 944 0.019217 952 0.144232 960 0.335265 968 0.394854 976 0.416237 992 0.86204 1008 0.934298 1024 0.31397 1056 0.0613901 1072 0.397804 1104 0.464469 1112 0.110735 1120 0.0752251 1128 0.200482 1136 0.429502 1144 0.723268 1152 0.907102 1184 0.190148 1192 0.0290023 1200 0.0101051 1208 0.0832748 1216 0.365181 1224 0.786562 1232 0.910737 1240 0.808207 1248 0.701561 1256 0.792734 1264 0.947251 1280 0.972344 1288 0.932793 1296 0.924324 1304 0.957217 1312 0.987139 1320 0.967695 1328 0.863773"}
,{"imola.trk", 101.202, 1, " 0 0.868859 16 0.285045 32 0.05794 40 0.0516145 64 0.0909436 72 0.110266 80 0.127868 96 0.151192 112 0.157413 120 0.145889 128 0.115221 144 0.0153103 152 0.0129826 160 0.0591686 176 0.315006 184 0.477964 192 0.629852 208 0.851273 216 0.921164 256 0.533913 280 0.360465 304 0.617944 312 0.384593 320 0.0556129 336 0.450114 352 0.884589 360 0.945629 376 0.943041 384 0.938577 392 0.937568 400 0.937715 416 0.944523 432 0.930188 448 0.752331 488 0.194093 496 0.704185 520 0.72581 528 0.438481 544 0.330757 576 0.944172 584 0.778715 592 0.285171 600 0.0292446 608 0.0402341 616 0.37498 624 0.824399 632 0.947571 640 0.946523 648 0.931294 656 0.910658 664 0.891894 672 0.880084 704 0.866043 736 0.97944 744 0.992022 768 0.927545 784 0.945003 792 0.85533 800 0.590605 808 0.129031 816 0.0101374 824 0.22986 832 0.705492 840 0.919859 848 0.938312 856 0.815102 864 0.576938 872 0.313879 880 0.196871 888 0.187043 896 0.170781 904 0.145525 912 0.10988 920 0.0746315 928 0.0515306 944 0.127493 952 0.323806 960 0.60567 968 0.614734 976 0.580507 984 0.842455 1000 0.59619 1008 0.212309 1104 0.908893 1152 0.53014 1216 0.437665 1248 0.934391 1256 0.870105 1280 0.313254 1344 0.694307 1360 0.897877 1376 0.952961 1384 0.930602 1392 0.942056 1400 0.948491 1408 0.907459 1416 0.744507 1424 0.384025 1440 0.176917 1448 0.622974 1456 0.654699 1464 0.289498 1488 0.767377 1504 0.936836 1512 0.862161 1520 0.771807 1528 0.714649 1536 0.725309 1544 0.80656 1552 0.936792 1560 0.975084 1568 0.880772 1576 0.717145 1584 0.625139 1592 0.619133 1600 0.607488"}
,{"indy500.trk", 138.111, 1, " 0 0.712262 64 0.891736 80 0.848762 96 0.806123 112 0.76907 128 0.742205 160 0.713775 192 0.702255 208 0.706847 224 0.727315 240 0.77376 248 0.803079 256 0.833207 264 0.860269 280 0.91742 352 0.206256 416 0.0952033 448 0.464483 496 0.937723 512 0.934448 544 0.427548 560 0.225161 576 0.0969992 600 0.0337034 648 0.421925 688 0.947974 696 0.942691 704 0.927865 712 0.905668 720 0.87718 736 0.814101 744 0.782524 752 0.752588 768 0.699003 784 0.658711 800 0.630098 816 0.61033 832 0.598539 848 0.594725 864 0.600714 880 0.62846 896 0.684672 912 0.765489 920 0.809849 928 0.851261 944 0.912037 1072 0.0491725 1088 0.153496 1120 0.606306 1136 0.876189 1152 0.93006 1176 0.935055 1184 0.862279 1200 0.570331 1216 0.331228 1232 0.16433 1248 0.0609144 1296 0.189379"}
,{"indygp.trk", 92.5946, 1, " 0 0.248215 16 0.0588745 32 0.0576264 48 0.0807768 64 0.106995 96 0.152155 112 0.169123 128 0.178738 144 0.179303 160 0.177523 176 0.172881 192 0.152467 224 0.0908442 256 0.0501397 264 0.0536234 272 0.11287 288 0.717813 304 0.70277 312 0.167312 328 0.14836 336 0.583101 344 0.884274 352 0.983269 360 0.978816 368 0.897762 376 0.771839 384 0.617261 392 0.437607 400 0.236779 408 0.0858599 416 0.0701899 424 0.214437 432 0.579237 440 0.887348 448 0.99137 464 0.621128 472 0.227867 488 0.0757792 496 0.230512 512 0.847636 520 0.985136 528 0.954824 544 0.844191 552 0.885026 560 0.843654 568 0.72286 576 0.484533 584 0.13256 592 0.0150871 600 0.0163703 608 0.0248805 616 0.00688194 624 0.0504297 632 0.231281 640 0.618479 648 0.89764 704 0.0566879 712 0.0860892 720 0.134895 728 0.195567 736 0.26163 752 0.400272 768 0.542133 784 0.678947 800 0.816472 808 0.883134 816 0.935342 832 0.942978 840 0.890883 848 0.748918 864 0.05034 880 0.40186 888 0.730962 896 0.810225 904 0.893677 912 0.992101 920 0.98948 928 0.858524 960 0.73854 968 0.919995 976 0.797364 984 0.484525 992 0.30769 1000 0.334278 1008 0.587935 1016 0.951339 1024 0.959452 1040 0.437832 1056 0.0549615 1064 0.0619817 1072 0.121535 1080 0.231322 1088 0.393332 1096 0.551886 1104 0.702719 1120 0.914768 1136 0.991008 1152 0.926607 1160 0.833752 1168 0.693464 1176 0.497772 1184 0.31009 1192 0.184676 1200 0.109359 1208 0.0706461 1216 0.0532578 1232 0.0817781 1248 0.33208 1280 0.789598 1312 0.961973 1344 0.811594"}
,{"jerez.trk", 87.7008, 1, " 0 0.830611 8 0.941919 16 0.93507 24 0.912954 48 0.79781 64 0.69142 72 0.631785 80 0.568724 88 0.501802 96 0.431787 104 0.359141 112 0.289016 120 0.220483 168 0.0658839 176 0.140925 184 0.375801 192 0.711032 200 0.925084 216 0.680463 224 0.399362 232 0.126217 240 0.0567469 248 0.0607009 264 0.153765 272 0.452567 280 0.778338 288 0.979785 296 0.931201 304 0.569665 312 0.157012 320 0.0178803 336 0.104549 344 0.234989 352 0.38262 384 0.654359 400 0.215603 416 0.0113917 448 0.360132 464 0.678861 480 0.616822 488 0.443144 504 0.283557 512 0.350685 520 0.468092 528 0.589702 536 0.745243 544 0.894873 552 0.966013 568 0.976174 576 0.897863 584 0.727274 608 0.2028 616 0.0764534 632 0.0652576 640 0.0812805 656 0.122558 672 0.148976 680 0.15673 704 0.159924 736 0.153252 752 0.127997 768 0.0812121 776 0.0647671 792 0.0599754 800 0.101486 808 0.301845 816 0.617608 824 0.902477 832 0.981898 840 0.835224 848 0.721819 856 0.379672 864 0.10784 880 0.0088977 888 0.0131058 896 0.0123532 912 0.0110056 928 0.0450632 944 0.298195 960 0.816497 976 0.915249 992 0.543757 1024 0.0140614 1048 0.0221274 1056 0.0850129 1072 0.134806 1080 0.114556 1088 0.0828654 1096 0.0618609 1104 0.155102 1112 0.306152 1120 0.491169 1128 0.748258 1136 0.95743 1144 0.984911 1152 0.900252 1160 0.753788 1168 0.71004 1176 0.768177 1184 0.87927 1192 0.984721 1208 0.686306 1216 0.297248 1224 0.0980707 1240 0.0936608 1248 0.18853 1256 0.341107 1264 0.551077 1272 0.839879 1280 0.978231 1312 0.312317 1360 0.802976 1376 0.514272 1392 0.348137 1408 0.377655 1424 0.751389 1432 0.881612 1440 0.933312 1448 0.921374 1456 0.786232 1464 0.398633 1472 0.0632715 1480 0.0222316 1488 0.281667"}
,{"kevin.trk", 113.068, 1, " 0 0.68253 32 0.955853 48 0.952887 64 0.941455 80 0.937851 128 0.63686 192 0.0679428 216 0.0339423 256 0.200439 288 0.545577 304 0.789541 320 0.93825 368 0.929201 384 0.910705 400 0.899556 416 0.908682 432 0.925518 448 0.950476 472 0.913135 480 0.774182 488 0.493744 496 0.119693 504 0.00519129 528 0.772356 552 0.955989 560 0.949608 576 0.939219 592 0.938221 608 0.945514 616 0.950126 640 0.957312 648 0.928725 656 0.843342 672 0.488608 688 0.196874 704 0.0569695 720 0.0103361 736 0.0085749 768 0.0146637 800 0.0137617 832 0.0520118 848 0.0559947 864 0.0126593 896 0.0120748 912 0.00841922 928 0.0103493 960 0.10391 968 0.131779 976 0.124121 984 0.0416319 992 0.00777633 1008 0.00657196 1016 0.0523546 1024 0.228006 1032 0.638249 1040 0.908164 1056 0.99348 1072 0.973506 1080 0.859239 1088 0.759458 1104 0.745191 1120 0.825987 1136 0.909734 1152 0.975521 1168 0.984933 1184 0.876997 1216 0.225824 1232 0.0608926 1256 0.0429324 1264 0.0425187 1280 0.0413466 1320 0.307268 1328 0.394175 1344 0.568688 1360 0.720877 1376 0.826049 1392 0.889843 1408 0.92085 1424 0.919698 1672 0.887332 1712 0.844214 1744 0.761613 1792 0.529387 1800 0.476617 1816 0.356955 1832 0.217011 1856 0.0565274 1872 0.131882 1880 0.226401 1896 0.511938 1904 0.661635 1912 0.776131 1920 0.862272 1928 0.922151 1944 0.955387 1952 0.904888 1960 0.780756 1968 0.567996 1976 0.27696 1984 0.101689 2024 0.0189997 2032 0.0782416 2048 0.441247 2056 0.739812 2064 0.90537 2080 0.956945 2088 0.945592 2112 0.88926 2120 0.873629 2128 0.864074 2144 0.871386 2152 0.883793 2160 0.898863 2176 0.931371 2192 0.957641 2304 0.0312038 2320 0.0112635 2336 0.0212342 2368 0.146899 2384 0.27668 2392 0.361342"}
,{"kimla02.trk", 92.8414, 1, " 0 0.374781 8 0.319076 16 0.287783 24 0.280097 32 0.282831 48 0.28654 56 0.294164 64 0.315118 72 0.355994 80 0.423623 88 0.522837 96 0.658897 112 0.962806 128 0.939808 144 0.497459 152 0.313197 160 0.182638 176 0.0418202 192 0.00608092 224 0.0196491 256 0.0164569 272 0.0673281 288 0.200636 296 0.313934 304 0.519477 320 0.911406 336 0.982636 352 0.754404 360 0.502286 368 0.260173 376 0.144062 384 0.0691519 400 0.00842546 408 0.00658543 432 0.0428025 448 0.0540307 456 0.0478475 472 0.0210909 488 0.00831842 504 0.0464179 512 0.0966771 528 0.343308 544 0.836061 560 0.994355 576 0.843863 624 0.0422861 632 0.155356 648 0.650669 656 0.852017 664 0.961452 688 0.835134 696 0.628109 704 0.329508 712 0.144078 720 0.0512624 728 0.0127251 752 0.00791533 768 0.0109174 776 0.0111023 784 0.00944936 800 0.00712559 816 0.065661 832 0.257249 848 0.627552 864 0.785224 872 0.742331 880 0.627449 888 0.447408 896 0.252582 904 0.113987 912 0.0447202 928 0.0920022 936 0.232413 944 0.495686 952 0.779242 960 0.919548 968 0.981064 984 0.954218 992 0.829625 1008 0.242717 1016 0.0770901 1024 0.0325956 1032 0.0642115 1040 0.154933 1048 0.283583 1056 0.428869 1064 0.58498 1072 0.747417 1088 0.935199 1104 0.841374 1120 0.455782 1128 0.18138 1136 0.0541427 1144 0.0107598 1160 0.0332902 1168 0.130655 1184 0.686242 1192 0.890141 1208 0.94457 1216 0.860776 1224 0.732828 1232 0.583392 1240 0.433248 1248 0.313908 1256 0.223578 1264 0.138866 1280 0.171602 1288 0.292809 1296 0.493771 1304 0.78158 1312 0.934139 1320 0.985581 1336 0.979296 1344 0.904247 1360 0.395298 1368 0.150261 1376 0.0459926 1392 0.117068 1400 0.249518 1408 0.406938 1424 0.721578 1432 0.85372 1456 0.917351 1464 0.802181 1472 0.611796 1480 0.306264 1488 0.0986857 1496 0.0195473 1520 0.0057236 1528 0.0364917 1536 0.143003 1544 0.377359 1552 0.775065 1568 0.973224 1576 0.829993 1584 0.704703 1592 0.5983 1600 0.506958"}
,{"loudon.trk", 96.223, 1, " 0 0.610348 8 0.848846 24 0.926627 32 0.902537 48 0.841727 56 0.815641 64 0.79588 80 0.784866 88 0.795215 96 0.823939 104 0.86341 112 0.900333 120 0.929383 136 0.863442 144 0.685468 152 0.380304 160 0.145347 176 0.0277352 184 0.0842293 192 0.172913 200 0.270692 208 0.345603 216 0.246887 224 0.127696 240 0.0177388 256 0.203586 272 0.76004 280 0.911581 288 0.932632 296 0.918621 304 0.891675 320 0.824613 328 0.793703 336 0.77343 352 0.788167 368 0.839187 384 0.904182 392 0.933049 400 0.91688 408 0.806284 416 0.568931 424 0.267455 432 0.0941837 448 0.0263232 456 0.0869525 464 0.181356 472 0.292891 480 0.304993 488 0.18492 496 0.0829087 512 0.0299961 520 0.118647"}
,{"magnycrs.trk", 90.9167, 1, " 0 0.705741 8 0.167841 16 0.0558929 24 0.0805732 32 0.140258 48 0.306869 56 0.405163 64 0.517953 80 0.743563 88 0.843405 96 0.916749 104 0.937278 112 0.864172 128 0.365491 144 0.0224144 160 0.15108 168 0.202697 176 0.145324 184 0.119953 208 0.699076 216 0.861987 224 0.947598 232 0.98385 248 0.971659 256 0.962049 272 0.98648 288 0.902526 296 0.764975 320 0.244167 328 0.131941 344 0.0703662 352 0.127275 368 0.23874 384 0.1586 392 0.0894217 400 0.0589471 456 0.737604 464 0.839646 480 0.939652 496 0.894451 528 0.498322 536 0.402106 576 0.0577477 592 0.060166 600 0.0598125 624 0.0630348 632 0.322442 640 0.971312 648 0.892483 656 0.193871 672 0.0950585 680 0.202851 688 0.335419 696 0.433301 704 0.484916 712 0.465699 720 0.354888 728 0.182255 736 0.0767085 744 0.0266764 752 0.0123003 760 0.0398684 768 0.0727542 776 0.0752246 784 0.0697577 792 0.068864 800 0.0842697 808 0.121975 816 0.184433 824 0.29 832 0.457778 840 0.695532 848 0.972538 856 0.893808 864 0.410126 896 0.447114 904 0.706522 912 0.886726 928 0.832918 936 0.675176 944 0.498693 952 0.273758 960 0.0873765 968 0.0443328 976 0.613025 1000 0.943154 1008 0.840827 1016 0.792518 1024 0.688231 1032 0.492004 1040 0.241965 1048 0.0511941 1056 0.0107353 1072 0.16085 1080 0.205166 1088 0.220721 1096 0.218134 1104 0.207314 1112 0.202538 1120 0.21564 1128 0.262046 1136 0.362016 1144 0.523331 1152 0.758242 1160 0.966503 1184 0.197313 1200 0.0155967 1216 0.031489 1232 0.515791 1248 0.979809 1264 0.949036 1280 0.413979 1288 0.126986 1312 0.0843691 1336 0.185738 1344 0.223307 1352 0.271112 1360 0.362108 1376 0.730135"}
,{"michigan.trk", 139.379, 1, " 0 0.222515 16 0.272748 24 0.255533 32 0.20823 40 0.150891 64 0.0381548 96 0.061563 104 0.101874 112 0.15365 128 0.284336 144 0.421298 160 0.537683 192 0.645667 224 0.562602 240 0.437542 256 0.253762 272 0.128477 352 0.0397423 384 0.140873 416 0.410862 440 0.768264 448 0.887297 456 0.937043 464 0.941017 472 0.92907 480 0.914834 496 0.884487 512 0.853862 520 0.835227 528 0.812171 536 0.787303 544 0.764774 552 0.747766 560 0.73825 576 0.749855 600 0.840439 624 0.93947 656 0.582112 688 0.190008 704 0.105263 712 0.0778389 728 0.0412293 744 0.0231435 768 0.0377188 832 0.518496 864 0.882398 880 0.8941 896 0.810069 912 0.657933 928 0.477464 936 0.38881 944 0.31016 952 0.244122 960 0.189354 968 0.145563 976 0.112323 984 0.0890408 992 0.0750547 1000 0.0683095 1008 0.0681712 1024 0.0865513 1040 0.127462"}
,{"midohio.trk", 91.7238, 1, " 0 0.270362 8 0.493081 16 0.641462 24 0.739162 32 0.802748 40 0.84521 48 0.875727 56 0.900795 64 0.915112 80 0.950065 104 0.908253 112 0.769169 120 0.511522 128 0.227668 136 0.0642841 160 0.208126 168 0.502005 176 0.759687 192 0.957922 208 0.927022 224 0.82118 240 0.679074 256 0.511352 272 0.328709 280 0.239852 288 0.151453 296 0.0862157 304 0.0513081 320 0.0649276 328 0.149338 336 0.310393 344 0.600041 352 0.891049 360 0.983421 384 0.939673 400 0.411192 408 0.146679 416 0.0481237 432 0.0557064 448 0.114654 456 0.152005 480 0.26981 488 0.314603 496 0.365475 512 0.493511 528 0.640413 536 0.723867 544 0.820422 552 0.929 560 0.987003 568 0.985893 576 0.924826 584 0.81435 592 0.715656 608 0.54492 624 0.393781 640 0.249987 648 0.18974 656 0.12205 664 0.0722384 672 0.052007 696 0.0650297 704 0.154585 712 0.348608 720 0.694723 728 0.9349 744 0.901114 752 0.652775 768 0.321187 816 0.449254 824 0.392992 832 0.51159 840 0.853823 856 0.882006 864 0.491021 880 0.164607 896 0.0389166 904 0.295222 912 0.548663 920 0.690832 944 0.851652 952 0.608924 960 0.538422 968 0.667329 976 0.931386 992 0.83967 1008 0.175239 1024 0.0440407 1032 0.0962929 1040 0.201758 1056 0.526165 1064 0.722201 1072 0.863951 1080 0.944695 1088 0.987421 1096 0.99262 1104 0.96008 1112 0.824697 1120 0.560482 1128 0.205863 1144 0.0252167 1152 0.200976 1168 0.461511 1176 0.497978 1184 0.627186 1192 0.798274 1200 0.869881 1208 0.894073 1216 0.948969 1224 0.991049 1232 0.968501 1248 0.468203 1272 0.0453256"}
,{"monaco.trk", 75.4624, 1, " 0 0.236214 8 0.120298 16 0.0595369 24 0.0553186 32 0.102605 40 0.272472 48 0.610565 64 0.847299 80 0.136168 96 0.0694892 112 0.179078 128 0.363891 144 0.658865 160 0.943695 176 0.898728 184 0.723984 192 0.376299 200 0.125615 208 0.0221696 224 0.129234 232 0.426135 240 0.793726 256 0.941954 264 0.648612 272 0.27588 280 0.091103 288 0.0553016 304 0.0567705 312 0.192793 320 0.637694 336 0.888593 352 0.493585 360 0.377286 376 0.055417 384 0.441813 408 0.518962 416 0.410245 432 0.926565 440 0.355777 448 0.0909979 456 0.0563691 464 0.101244 480 0.268703 496 0.523597 504 0.676389 512 0.788567 528 0.933991 544 0.987725 552 0.976277 576 0.751519 584 0.707241 592 0.75623 600 0.85546 608 0.926514 616 0.942996 624 0.822713 648 0.376665 672 0.661292 680 0.206745 696 0.342018 704 0.580771 712 0.585594 720 0.289252 736 0.397709 744 0.536829 752 0.40344 760 0.209598 768 0.618242 832 0.271864 848 0.269721 864 0.1634 888 0.751669 896 0.18618 912 0.0975228 920 0.469955 928 0.979305 936 0.840883 960 0.251485 968 0.392452 976 0.47474 992 0.556079 1000 0.553015 1008 0.51377 1016 0.440906"}
,{"montreal.trk", 113.733, 1, " 0 0.139495 16 0.441756 32 0.602208 48 0.629682 56 0.596722 64 0.538895 72 0.463018 80 0.385822 96 0.309787 128 0.569619 144 0.876298 160 0.995935 168 0.966581 176 0.851592 184 0.616517 192 0.303604 224 0.422928 232 0.797623 240 0.970262 248 0.988704 256 0.881357 264 0.582186 272 0.341648 288 0.115505 296 0.0695713 304 0.0357215 312 0.0420443 320 0.0780346 328 0.140774 336 0.235529 344 0.372605 352 0.560864 384 0.586157 392 0.232655 400 0.0639147 416 0.0408856 432 0.182904 448 0.224928 480 0.813322 488 0.942773 512 0.876911 520 0.705233 528 0.476691 536 0.208012 560 0.041878 568 0.180952 576 0.458919 584 0.837106 608 0.684506 640 0.0851483 672 0.0485274 688 0.100007 704 0.181307 712 0.213192 720 0.22386 736 0.191909 744 0.153104 752 0.102438 768 0.0620206 776 0.09622 792 0.290579 832 0.867388 864 0.134218 880 0.583474 944 0.836419 952 0.788402 960 0.73541 968 0.654992 976 0.541726 984 0.404641 992 0.276906 1016 0.0533633 1024 0.031951 1032 0.0468643 1040 0.184811 1048 0.573422 1056 0.952432 1072 0.885894 1080 0.353217 1088 0.110896 1096 0.0356696 1120 0.0509822 1136 0.518149 1152 0.676745 1168 0.632498 1184 0.613884 1192 0.614167 1216 0.663585 1248 0.83044 1256 0.887274 1280 0.907638 1296 0.262332 1312 0.00638727 1328 0.374767 1344 0.682696 1360 0.547731 1368 0.481432 1376 0.420078 1392 0.316677 1408 0.265252 1424 0.302259 1440 0.45766"}
,{"monza-76.trk", 131.192, 1, " 0 0.0701578 32 0.0567421 48 0.0816254 64 0.108065 88 0.146694 128 0.22027 160 0.283462 192 0.355353 208 0.395041 256 0.530819 312 0.728137 320 0.723619 336 0.571498 344 0.490448 360 0.325572 368 0.2414 384 0.0707844 448 0.446853 464 0.28668 512 0.700361 576 0.939762 608 0.715635 640 0.243707 656 0.064338 672 0.0655247 688 0.224654 696 0.356139 704 0.505073 712 0.646131 720 0.75977 736 0.869404 752 0.803117 768 0.549116 816 0.800159 824 0.612139 832 0.416186 848 0.154811 864 0.0484679 872 0.0500953 880 0.102509 888 0.220352 896 0.419166 912 0.829236 944 0.946059 960 0.680842 976 0.200298 984 0.0754628 992 0.0438199 1000 0.0456944 1008 0.0558111 1024 0.334392 1056 0.987872 1072 0.745534 1088 0.261261 1104 0.056942 1120 0.0476306 1136 0.0322041 1144 0.0152463 1152 0.0137892 1168 0.0641187 1176 0.120148 1184 0.198726 1200 0.392879 1216 0.559959 1232 0.700248 1248 0.808495 1264 0.874908 1272 0.892508 1280 0.901391 1288 0.904973 1312 0.90069 1320 0.895599 1328 0.889736 1336 0.88907 1344 0.901068 1352 0.926172 1360 0.953604 1368 0.941138 1376 0.892421 1392 0.634819 1424 0.144374 1440 0.757314 1456 0.979588 1472 0.413677 1504 0.527255 1520 0.793727 1536 0.926208 1560 0.942921 1568 0.918712 1584 0.850716 1600 0.766496 1632 0.581507 1664 0.399889 1696 0.224231 1704 0.183965 1712 0.144341 1720 0.105467 1728 0.0695945 1736 0.04538 1752 0.0561689 1760 0.0907748 1768 0.158474 1776 0.269435 1784 0.434942 1792 0.673474 1800 0.858796 1808 0.949938 1816 0.984539 1840 0.973244 1856 0.814684 1888 0.123759 1896 0.06475 1912 0.0517292 1920 0.0743372 1928 0.0973031 1936 0.104295"}
,{"mosport.trk", 102.413, 1, " 0 0.524273 8 0.230022 32 0.0448903 40 0.0489631 48 0.0492471 72 0.0466579 80 0.105489 96 0.474193 104 0.681695 112 0.82871 144 0.960701 160 0.757868 176 0.339625 192 0.0651081 208 0.118507 216 0.253034 240 0.773471 256 0.82332 264 0.738898 272 0.572703 288 0.20818 336 0.0900535 352 0.325358 368 0.65728 384 0.658789 392 0.540803 400 0.442745 408 0.428307 416 0.498877 424 0.664926 432 0.834626 464 0.957567 480 0.745366 496 0.524678 512 0.338185 528 0.139961 536 0.0550041 544 0.0460861 552 0.103457 560 0.221561 568 0.386599 576 0.584108 584 0.772548 592 0.898229 600 0.955467 624 0.728291 640 0.231798 672 0.123097 704 0.362074 712 0.686103 720 0.939982 736 0.886987 744 0.783953 752 0.969505 760 0.925003 768 0.44751 784 0.0479208 792 0.0395956 800 0.0170846 816 0.0228753 824 0.075656 832 0.173555 840 0.2665 848 0.342701 864 0.453432 880 0.539255 896 0.61524 912 0.710095 928 0.83481 944 0.920573 976 0.858968 984 0.842117 992 0.828402 1008 0.832807 1024 0.885184 1032 0.916963 1040 0.923513 1048 0.901141 1064 0.770278 1088 0.39125 1096 0.267618 1104 0.165615 1112 0.0873579 1136 0.0780325 1152 0.275751 1160 0.452982 1168 0.647392 1184 0.880797 1192 0.939073 1208 0.989127 1232 0.950555 1280 0.113996 1288 0.0147681 1312 0.347205 1320 0.489622"}
,{"nazareth.trk", 104.216, 1, " 0 0.69925 8 0.88256 16 0.933583 24 0.918741 32 0.860613 40 0.747055 48 0.571892 56 0.367476 64 0.21606 80 0.0390174 96 0.0273539 128 0.552953 136 0.768382 144 0.892781 152 0.931081 160 0.928227 168 0.856582 176 0.702021 184 0.44883 192 0.224039 208 0.0295082 216 0.0106433 232 0.0304169 240 0.0356633 272 0.0476418 288 0.207456 304 0.578499 312 0.817026 320 0.923266 328 0.930716 336 0.918225 344 0.905161 352 0.900591 368 0.905679 376 0.913431 384 0.917382 392 0.927992 400 0.927521 408 0.839914 416 0.64576 424 0.361851 432 0.162204 448 0.015454 472 0.0202964 480 0.0151636 496 0.0293801 512 0.164947"}
,{"nurnburg.trk", 96.2388, 1, " 40 0.0534252 48 0.0621106 64 0.0746104 80 0.0870153 96 0.0902781 112 0.0887045 128 0.0873219 144 0.0855584 152 0.0859865 168 0.0794153 176 0.0724789 184 0.0620577 192 0.0535314 200 0.0481662 224 0.0799584 232 0.187514 240 0.393604 264 0.917479 272 0.484535 280 0.134219 304 0.218099 320 0.647168 336 0.948624 344 0.956152 352 0.951435 360 0.948938 376 0.946187 384 0.950512 400 0.952102 408 0.88777 416 0.740548 424 0.46594 432 0.172251 456 0.114605 464 0.273244 480 0.581814 488 0.859521 496 0.97872 512 0.84999 528 0.168069 544 0.0312134 552 0.0234452 560 0.0261028 576 0.060467 584 0.0872961 592 0.104797 600 0.118504 608 0.125527 616 0.122336 624 0.112043 640 0.0679064 656 0.040152 672 0.166086 680 0.422102 688 0.790781 696 0.945449 704 0.986078 720 0.962782 728 0.814043 736 0.454765 744 0.153178 752 0.0465535 760 0.0683502 768 0.173046 784 0.464994 792 0.565826 800 0.601853 808 0.562136 816 0.440348 832 0.0569691 848 0.0729698 856 0.268234 864 0.595683 872 0.86535 880 0.976947 888 0.986345 896 0.895907 904 0.799473 912 0.748808 920 0.73356 928 0.745582 936 0.775075 944 0.812127 952 0.857834 960 0.905994 976 0.953151 992 0.950695 1000 0.877436 1008 0.695511 1016 0.343854 1024 0.0299833 1040 0.36658 1048 0.601825 1056 0.670508 1072 0.680417 1088 0.963198 1104 0.940634 1120 0.485679 1136 0.0657107 1152 0.0512346 1168 0.0893515 1184 0.153472 1192 0.199988 1200 0.259298 1208 0.33958 1216 0.445653 1224 0.583294 1232 0.756968 1248 0.989813 1264 0.852236 1272 0.733627 1280 0.656887 1288 0.613645 1296 0.595285 1304 0.594201 1312 0.604563 1328 0.632845 1344 0.653494 1360 0.565526 1368 0.453105 1376 0.286176 1408 0.566744 1416 0.665546 1424 0.663685 1432 0.561651 1440 0.367231 1456 0.0841366 1472 0.101793 1480 0.291061 1488 0.620418 1496 0.836912 1504 0.946318 1512 0.992683 1520 0.956655"}
,{"oval2.trk", 90.029, 1, " 0 0.666493 8 0.858575 16 0.947249 32 0.951239 40 0.917806 48 0.814545 64 0.355961 72 0.170098 80 0.0656437 96 0.00545272 112 0.01184 120 0.00748887 128 0.00871579 144 0.0852952 160 0.338319 176 0.795928 184 0.922343 208 0.943304 216 0.870072 224 0.710959 232 0.457411 240 0.232616 248 0.0987223 256 0.0320823 280 0.00911017 304 0.0213952 320 0.145779"}
,{"phoenix.trk", 100.457, 1, " 0 0.689355 8 0.880933 16 0.933543 32 0.89971 40 0.865351 48 0.840253 64 0.841406 80 0.878862 96 0.920993 112 0.918852 120 0.825484 128 0.622559 136 0.310793 144 0.115882 152 0.0315745 160 0.0106586 176 0.00983481 192 0.0898553 208 0.461613 216 0.769704 224 0.918272 232 0.928902 240 0.884536 248 0.795364 256 0.658708 272 0.287089 280 0.148956 288 0.0700835 304 0.0119459 312 0.0235261 320 0.0649145 336 0.258489 344 0.425561 352 0.638844 360 0.803378 368 0.895668 384 0.903497 392 0.783774 400 0.579703 408 0.311518 416 0.135382 432 0.0129365 456 0.0551184 464 0.0542191 480 0.022904 496 0.0490584 512 0.223866"}
,{"pocono.trk", 117.738, 1, " 0 0.641093 8 0.830201 16 0.930732 48 0.941841 64 0.91409 88 0.870775 104 0.843156 128 0.803032 160 0.74812 192 0.701865 208 0.685433 224 0.678502 256 0.691957 272 0.709131 288 0.726996 320 0.763089 336 0.781475 352 0.807894 384 0.872689 392 0.889645 400 0.901485 408 0.916816 416 0.937032 424 0.950596 448 0.954135 456 0.910932 464 0.823521 472 0.665094 480 0.422534 488 0.237539 496 0.123458 504 0.0540721 512 0.0166369 528 0.0463173 544 0.294173 560 0.788978 568 0.922175 616 0.932853 640 0.904366 656 0.88561 672 0.868745 704 0.830492 712 0.82209 736 0.80872 768 0.814751 776 0.819325 784 0.824992 792 0.831826 808 0.848309 816 0.859125 832 0.88192 848 0.911184 864 0.939414 872 0.952532 880 0.960776 896 0.961192 904 0.928511 912 0.846575 928 0.451168 944 0.0530441 960 0.0519831 968 0.199452 992 0.86596 1056 0.917195 1072 0.902993 1088 0.895787 1104 0.895484 1120 0.901861 1128 0.905489 1152 0.926268 1176 0.954386 1200 0.96146 1208 0.935302 1216 0.871368 1224 0.751184 1232 0.561971 1240 0.352284 1248 0.211824 1264 0.0603927 1280 0.0071107 1304 0.173214"}
,{"rars.trk", 91.8667, 1, " 0 0.293208 16 0.792971 48 0.960329 56 0.941305 64 0.910256 80 0.824332 96 0.719173 128 0.503636 144 0.418464 152 0.380742 160 0.346984 176 0.303567 192 0.281302 208 0.273728 224 0.286718 240 0.303219 256 0.345762 272 0.391343 288 0.4389 304 0.492348 320 0.554604 336 0.628608 352 0.719148 384 0.891106 408 0.968924 424 0.956427 432 0.893076 448 0.544198 464 0.117359 472 0.0335613 488 0.0228903 512 0.511969 528 0.772696 544 0.690457 576 0.456161 592 0.780755 608 0.953246 616 0.984221 624 0.995231 640 0.932767 656 0.821887 672 0.919518 688 0.410505 720 0.66765 736 0.965424 768 0.515831 824 0.349296 832 0.337883 864 0.141393 896 0.754256 928 0.94405 976 0.178554 992 0.619718 1024 0.263845 1032 0.111137 1088 0.0377179 1152 0.484254 1184 0.633545 1200 0.36059 1216 0.239883 1264 0.980466 1280 0.971714 1312 0.245313 1328 0.106281 1344 0.28368 1376 0.477257 1392 0.137043 1456 0.162814 1472 0.616826 1488 0.797955 1504 0.69546 1520 0.434352 1536 0.362189 1552 0.554333 1568 0.918022 1600 0.81259 1656 0.532894 1696 0.171309 1712 0.0211902 1760 0.0611646 1792 0.0131437 1824 0.777118 1856 0.966096 1888 0.859416 1896 0.724958 1904 0.513024 1912 0.229906"}
,{"s1.trk", 87.5981, 1, " 8 0.723147 32 0.802189 40 0.691738 48 0.544567 56 0.376348 64 0.289343 72 0.800574 80 0.9845 88 0.952606 96 0.934993 104 0.848265 112 0.654095 120 0.332257 128 0.105753 144 0.0372053 160 0.509857 176 0.953074 216 0.732506 224 0.447448 232 0.169545 240 0.0395623 248 0.00909293 272 0.626407 280 0.876266 296 0.909014 304 0.80799 312 0.671193 320 0.505814 328 0.338158 352 0.0499663 368 0.267971 392 0.942827 416 0.103604 456 0.0479749 464 0.0804421 488 0.166192 496 0.159368 504 0.111565 512 0.0280224 528 0.065518 544 0.448903 576 0.738181 584 0.402011 592 0.155782 616 0.120953 624 0.339414 632 0.463959 640 0.645796 672 0.632474 680 0.413361 688 0.174339 712 0.150704 720 0.372262 752 0.979239 768 0.986355 776 0.986555 784 0.991846 816 0.958057 832 0.642228 848 0.182834 856 0.19509 864 0.353362 872 0.600669 880 0.803184 888 0.876512 896 0.824854 904 0.615664 912 0.284513 920 0.106945 928 0.0247593 944 0.107733 960 0.220813 976 0.130797 992 0.0313301 1000 0.0084972 1008 0.0141779 1032 0.29459"}
,{"s2.trk", 82.5631, 1, " 0 0.471812 16 0.911341 32 0.944019 40 0.933131 64 0.914027 80 0.925161 88 0.93214 96 0.939779 104 0.949082 120 0.916979 128 0.806462 136 0.570828 144 0.236528 152 0.0551599 176 0.315389 184 0.465778 192 0.455419 200 0.40124 208 0.567009 216 0.882865 232 0.917673 248 0.509154 256 0.707418 264 0.881181 272 0.926222 288 0.429679 320 0.905869 336 0.91153 344 0.829568 352 0.70997 360 0.567223 368 0.411425 376 0.242436 384 0.0595419 400 0.960446 408 0.936132 416 0.876405 424 0.869105 432 0.897883 440 0.927846 448 0.943209 464 0.912812 472 0.754706 496 0.15274 504 0.734878 512 0.945259 528 0.357663 544 0.0440247 560 0.191573 576 0.475424 592 0.552251 600 0.378515 608 0.166879 616 0.0624735 624 0.0748633 632 0.310102 640 0.888515 656 0.597876 672 0.323399 696 0.0484026 704 0.09662 720 0.212327 744 0.444926 752 0.592184 760 0.857496 768 0.979422 776 0.977097 784 0.805159 792 0.363267 800 0.10152 808 0.0491702 816 0.0546575 864 0.926526 872 0.681751 880 0.515501 888 0.533736 896 0.642931 912 0.834739 920 0.905715 928 0.943601 936 0.927529 944 0.832916 952 0.613172 960 0.177351 976 0.413906 992 0.540756 1008 0.0971128 1016 0.0131333"}
,{"speed2.trk", 125.387, 1, " 0 0.601992 16 0.855714 32 0.964019 48 0.970788 64 0.961457 80 0.954923 112 0.94634 128 0.941103 144 0.937666 160 0.939626 192 0.955245 208 0.965626 224 0.97221 240 0.962718 248 0.918563 256 0.827454 264 0.679759 272 0.463073 280 0.191175 320 0.493815 352 0.968506 376 0.874283 384 0.931366 400 0.96797 416 0.872308 432 0.670187 448 0.398478 464 0.340178 480 0.449427 488 0.491387 512 0.581037 520 0.602032 560 0.703878 576 0.745979 592 0.78595 608 0.822817 624 0.843924 640 0.85019 672 0.845186 688 0.852471 704 0.879945 720 0.917748 728 0.935824 736 0.952118 744 0.966394 768 0.95399 776 0.908722 784 0.831298 792 0.712073 800 0.545405 816 0.216186 832 0.0539316 864 0.0733773 872 0.158446 896 0.610926 928 0.7343 936 0.842742 944 0.922901 952 0.962916 976 0.914958 984 0.729079 992 0.549188 1008 0.228716 1024 0.218297 1032 0.36104 1088 0.895424 1120 0.343115 1152 0.0242097 1168 0.0379646"}
,{"stef2.trk", 69.7096, 1, " 0 0.412511 8 0.83586 16 0.952379 32 0.951614 40 0.954261 48 0.948097 64 0.679585 96 0.306533 112 0.405555 128 0.309127 144 0.0365031 184 0.0290429 192 0.104512 248 0.959119 256 0.866016 288 0.190791 296 0.594494 304 0.618621 320 0.762128 328 0.667249 336 0.821945 352 0.898191 360 0.467602 368 0.0846202"}
,{"tremblnt.trk", 95.468, 1, " 0 0.152152 8 0.207425 16 0.21628 24 0.215174 32 0.200636 64 0.438889 80 0.612781 96 0.852013 128 0.908247 144 0.643205 160 0.216307 176 0.0498999 184 0.0504387 192 0.103234 200 0.252513 208 0.371231 224 0.314395 240 0.811547 272 0.965382 280 0.888414 288 0.590072 304 0.140942 320 0.909729 336 0.94125 352 0.939944 368 0.684314 384 0.189151 392 0.0597074 416 0.171829 432 0.559277 464 0.31098 472 0.155614 480 0.0884786 496 0.227397 512 0.722702 544 0.869591 560 0.373672 576 0.068457 584 0.0520894 592 0.0752368 608 0.00937166 616 0.0762237 632 0.264562 640 0.239477 648 0.143544 672 0.133106 680 0.28558 688 0.543181 696 0.778185 704 0.891354 712 0.937322 720 0.969418 736 0.822354 744 0.658117 768 0.305335 776 0.146363 784 0.0569574 816 0.0689626 824 0.0666058 832 0.0531638 848 0.0338485 856 0.0297116 864 0.0285889 880 0.0309996 896 0.0555473 912 0.10496 928 0.118328 936 0.10992 944 0.0975663 960 0.0762771 1000 0.0604485 1008 0.128341 1016 0.270701 1024 0.499258 1040 0.905069 1064 0.916696 1072 0.769734 1080 0.556957 1088 0.411751 1096 0.205336 1120 0.400478 1136 0.928663 1144 0.932777 1152 0.728357 1160 0.235387 1184 0.474735 1200 0.93377 1208 0.963633 1216 0.989323 1232 0.961246 1240 0.898544 1248 0.790578 1256 0.618322 1264 0.391514 1272 0.217644 1280 0.112456 1288 0.0600622 1296 0.056047 1304 0.184618 1312 0.552761 1320 0.918638 1336 0.928108 1344 0.749115 1352 0.397544 1360 0.133922 1384 0.0630309 1392 0.036958 1400 0.0175753 1408 0.00918773 1416 0.0122625 1424 0.0274376 1432 0.0669689"}
,{"trouble.trk", 91.846, 1, " 0 0.606059 24 0.96018 32 0.947287 40 0.933984 56 0.909182 64 0.899562 80 0.892299 96 0.899527 104 0.907869 112 0.919018 128 0.929778 160 0.940291 168 0.946582 192 0.955996 224 0.121386 240 0.670301 272 0.942255 280 0.870555 304 0.491915 320 0.259508 336 0.0941043 376 0.168602 384 0.397583 392 0.736461 400 0.900507 416 0.99426 448 0.962939 480 0.267513 488 0.140209 496 0.119919 504 0.142643 512 0.163368 520 0.171588 528 0.154442 536 0.0943412 544 0.0375446 552 0.00492495 560 0.0421704 576 0.353067 584 0.585429 624 0.975766 640 0.985431 656 0.721041 688 0.71311 704 0.962597 720 0.958588 736 0.963212 768 0.858081 776 0.631599 784 0.233397 808 0.290882 816 0.582602 824 0.784854 832 0.963748 848 0.848985 856 0.4929 872 0.072295 880 0.242513 888 0.357811 896 0.397868 904 0.361337 912 0.244085 928 0.0495718 960 0.0128315 968 0.0155981 976 0.01411 992 0.00536243 1024 0.211798 1048 0.565759 1056 0.832834 1064 0.965876 1088 0.971603 1096 0.865404 1104 0.610221 1112 0.259952 1120 0.0857479 1136 0.0558111 1144 0.106285 1152 0.160809 1160 0.219004 1168 0.286792 1176 0.386666 1184 0.54255 1200 0.884853 1216 0.995409 1232 0.971821 1248 0.974952 1264 0.822156 1272 0.623941 1280 0.333685 1288 0.129467 1312 0.0577147 1328 0.340125 1344 0.652446 1360 0.937906 1376 0.96056 1408 0.951577 1424 0.950599 1440 0.955269 1456 0.958754 1472 0.958205 1504 0.71711 1520 0.298192 1536 0.0584362 1568 0.152022 1584 0.493514 1600 0.722619 1608 0.725747 1632 0.374907 1640 0.272578 1648 0.237347 1664 0.387882 1680 0.85234 1712 0.640544 1720 0.279581 1728 0.0767587 1744 0.0489482 1760 0.522539 1776 0.920014 1792 0.900422 1800 0.698064 1808 0.229455 1816 0.0138118 1824 0.0510473 1832 0.373836 1848 0.802165 1856 0.975728 1872 0.838433 1880 0.393108 1888 0.219308 1896 0.0318111 1904 0.0261336 1920 0.260894"}
,{"v01.trk", 82.0459, 1, " 0 0.319799 8 0.679714 16 0.880809 32 0.958918 40 0.957402 48 0.957166 64 0.959256 80 0.936255 88 0.828235 96 0.593301 104 0.233868 112 0.0570259 128 0.0504493 144 0.633898 152 0.884497 168 0.953974 176 0.936765 184 0.9163 192 0.91366 208 0.936188 216 0.954193 224 0.960632 232 0.939313 240 0.829323 256 0.193366 288 0.636332 312 0.919369 320 0.746451 328 0.407708 336 0.0723204"}
,{"v02.trk", 82.9371, 1, " 16 0.763431 24 0.905337 32 0.959252 48 0.953339 64 0.77353 72 0.524711 80 0.189479 88 0.0417256 104 0.0673383 112 0.28011 128 0.900927 144 0.957371 160 0.954115 168 0.95504 176 0.956386 192 0.957589 208 0.91385 216 0.775592 224 0.508316 232 0.164673 240 0.025285 256 0.125131 264 0.319008 272 0.29533 312 0.99423 320 0.872137 328 0.346295"}
,{"v03.trk", 89.1233, 1, " 0 0.948327 16 0.961771 32 0.952154 48 0.946194 56 0.946652 64 0.951355 72 0.957378 80 0.9619 104 0.917318 112 0.824663 128 0.434084 136 0.15953 144 0.0402592 160 0.0205584 168 0.108498 200 0.971778 208 0.987002 216 0.988003 224 0.990244 232 0.994019 240 0.994137 248 0.992599 256 0.990883 272 0.984004 288 0.987963 304 0.917236 312 0.753553 320 0.417601 328 0.122654 352 0.19634 368 0.82454 384 0.951801 392 0.863095 400 0.705199 416 0.292933 432 0.796912 448 0.983895 456 0.825689 464 0.339857 488 0.135639 496 0.500268 512 0.877556"}
,{"watglen.trk", 99.5267, 1, " 16 0.06961 24 0.0551714 32 0.0597394 64 0.0858925 88 0.098636 112 0.0950627 128 0.0817028 176 0.0923597 184 0.234874 192 0.528795 200 0.802151 208 0.950369 232 0.735985 240 0.404961 248 0.154308 256 0.0590574 272 0.0562881 280 0.0610263 288 0.0564405 296 0.0549865 304 0.0808108 320 0.429076 344 0.906139 368 0.953809 384 0.740569 400 0.399257 408 0.30797 416 0.169996 432 0.014343 448 0.115017 512 0.556716 520 0.68655 528 0.869495 544 0.972259 560 0.694846 576 0.21295 608 0.07195 616 0.0950758 624 0.122292 640 0.188362 648 0.223848 656 0.258549 664 0.290116 672 0.315059 680 0.331765 688 0.33427 696 0.329468 704 0.320932 712 0.309376 720 0.294781 728 0.276889 736 0.255643 744 0.231828 752 0.203985 760 0.172691 768 0.143309 776 0.11229 784 0.0848599 808 0.0761364 816 0.139386 824 0.260993 832 0.453143 840 0.697196 848 0.858681 864 0.982346 896 0.990033 928 0.744136 936 0.57757 944 0.352785 960 0.0657874 968 0.0990096 992 0.674685 1008 0.784471 1016 0.684599 1024 0.474738 1032 0.218587 1040 0.0812158 1048 0.0253254 1072 0.0349247 1088 0.257139 1104 0.791512 1112 0.930392 1120 0.930963 1128 0.822232 1136 0.631047 1144 0.41956 1152 0.234414 1160 0.1473 1168 0.168379 1176 0.295847 1184 0.53671 1192 0.822387 1200 0.955489 1208 0.989779 1216 0.987292 1224 0.986334 1232 0.992193 1248 0.870688 1264 0.33434 1272 0.111177 1296 0.0646059 1320 0.0740436 1344 0.0739217 1368 0.0677822 1400 0.0577552 1408 0.0548305 1424 0.0879237 1432 0.242109 1440 0.578491 1448 0.861807 1456 0.981084 1464 0.971723 1472 0.812449 1488 0.146343 1504 0.0997174 1512 0.231769 1520 0.408897 1528 0.604334 1536 0.790317 1544 0.91996 1552 0.944761 1560 0.874429 1568 0.685929 1584 0.10393 1592 0.0145855 1616 0.558817 1624 0.856784 1648 0.931554 1672 0.934601 1696 0.912393 1712 0.516085 1744 0.0196584 1760 0.245383 1776 0.599102 1784 0.618187 1792 0.529465 1800 0.337063 1808 0.145349 1824 0.0875274 1840 0.659633 1848 0.932196"}
,{"wierd.trk", 95.1355, 1, " 0 0.581709 8 0.812204 16 0.93012 24 0.970497 40 0.972606 48 0.969749 64 0.963341 72 0.963664 96 0.96907 112 0.955729 120 0.905499 128 0.813311 136 0.63033 144 0.240732 152 0.0215641 160 0.00700236 168 0.0876593 200 0.976174 208 0.830632 216 0.771513 224 0.787862 240 0.895035 256 0.984317 272 0.971441 288 0.779945 296 0.59315 312 0.413243 320 0.436978 328 0.521998 336 0.653919 344 0.810745 352 0.92058 368 0.950938 376 0.866525 384 0.708924 400 0.0475556 416 0.0378508 424 0.352463 432 0.770745 440 0.934741 448 0.974175 456 0.968882 464 0.961888 480 0.936937 488 0.917621 496 0.889772 504 0.848784 512 0.791242 520 0.704956 528 0.580277 544 0.355795 576 0.0781333 592 0.0230905 688 0.0114444 704 0.00933612 736 0.00840629 760 0.00720482 784 0.00590275 792 0.00587032 816 0.035919 832 0.195039 840 0.48665 848 0.919049 856 0.992078 864 0.977212 872 0.804494 880 0.354261 896 0.0517968 912 0.0512701 920 0.107083 928 0.184539 936 0.272229 944 0.362795 960 0.520551 976 0.643493 984 0.692305 992 0.735906 1024 0.888286 1056 0.976461 1088 0.990081 1152 0.971979 1184 0.981681 1216 0.990453 1248 0.95638 1272 0.876629 1280 0.855132 1288 0.875869 1296 0.924174 1304 0.960427 1312 0.95043 1320 0.859434 1328 0.633829 1336 0.161794 1344 0.0164051 1360 0.104596 1368 0.591249 1376 0.851897 1384 0.957484 1392 0.963816 1400 0.900503 1408 0.789603 1416 0.648575 1424 0.48762 1440 0.209871 1456 0.0592457 1464 0.0248766 1472 0.012148 1496 0.00865414 1504 0.0134382 1536 0.0258549 1552 0.0249964 1600 0.0173954 1608 0.016929 1664 0.0172924 1728 0.0240178 1792 0.0152737 1824 0.0151324 1856 0.0175608 1872 0.0113233 1896 0.0902852 1912 0.808345 1928 0.989251 1944 0.14936 1952 0.0520683 1960 0.114089 1968 0.126071 1976 0.0398077 1984 0.00772512 2000 0.00429724 2008 0.0210265 2016 0.0856459"}
,{"zandvort.trk", 106.175, 1, " 0 0.518883 8 0.812671 16 0.942314 32 0.96124 48 0.938917 64 0.922968 96 0.901679 112 0.893185 128 0.882299 144 0.871726 160 0.85805 192 0.811482 200 0.796126 216 0.761785 224 0.741748 240 0.695756 248 0.668193 256 0.654056 264 0.668747 272 0.70803 288 0.820449 304 0.934977 328 0.919321 336 0.832816 344 0.692669 352 0.488313 368 0.123716 400 0.10143 416 0.415756 440 0.543269 448 0.477331 480 0.780186 488 0.951154 504 0.933169 512 0.734384 520 0.375865 528 0.0938065 560 0.5542 576 0.880824 608 0.849148 616 0.718283 624 0.587716 632 0.512899 640 0.505621 656 0.670301 664 0.764955 672 0.82498 704 0.66876 720 0.332125 752 0.161687 768 0.393168 776 0.546309 832 0.873662 840 0.847198 848 0.8512 856 0.829919 864 0.76961 872 0.660414 880 0.49346 888 0.311442 896 0.186246 912 0.0459809 928 0.00483767 960 0.240404 992 0.907214 1008 0.961306 1016 0.913533 1024 0.831515 1032 0.722371 1040 0.615863 1048 0.587668 1056 0.650518 1064 0.771755 1072 0.897255 1080 0.975582 1088 0.992204 1104 0.854429 1112 0.742801 1120 0.636864 1128 0.534026 1136 0.423429 1144 0.294992 1152 0.147243 1168 0.00531987 1176 0.0196532 1184 0.0370191 1192 0.10319 1200 0.272469 1208 0.608881 1216 0.843035 1224 0.968087 1232 0.992505 1248 0.598815 1264 0.0847088 1288 0.252575 1304 0.755847 1312 0.865048 1320 0.951755 1328 0.993425 1336 0.940229 1344 0.827189 1352 0.600175 1360 0.260338 1368 0.0839724 1376 0.0131529 1384 0.0117182"}
#endif

#ifndef WIN32
,{"fourmile.trk", 107.175, 1, " 0 0.372454 16 0.833394 48 0.916179 64 0.774491 72 0.679999 88 0.461156 96 0.337722 104 0.231449 112 0.285908 120 0.576365 136 0.988823 144 0.965187 152 0.915344 160 0.878862 168 0.853043 176 0.837818 184 0.834459 192 0.846007 200 0.861415 208 0.886016 216 0.90966 240 0.967454 248 0.917976 256 0.531862 264 0.169467 272 0.0526043 288 0.00995917 296 0.0119115 320 0.0160078 352 0.0177693 384 0.00806505 416 0.028874 432 0.166167 440 0.475843 448 0.813639 456 0.947007 464 0.992211 480 0.917195 496 0.383285 504 0.146196 512 0.046529 528 0.0323373 544 0.0324727 552 0.0496103 560 0.0941497 568 0.169595 576 0.281329 584 0.436271 592 0.581443 608 0.805289 616 0.884575 640 0.992663 672 0.804462 680 0.688371 688 0.519853 696 0.358738 704 0.232972 720 0.0771964 736 0.0159535 752 0.00730619 792 0.015769 816 0.0102581 832 0.0140415 912 0.0136651 928 0.0487999 952 0.195892 968 0.379354 992 0.802391 1000 0.902469 1008 0.954145 1024 0.960099 1056 0.985483 1064 0.974285 1072 0.819757 1088 0.178059 1104 0.219329 1120 0.438982 1128 0.551622 1136 0.659351 1152 0.860934 1168 0.963311 1184 0.904904 1192 0.812201 1208 0.48707 1216 0.244619 1224 0.0474165 1240 0.102114 1248 0.240071 1256 0.403425 1264 0.620344 1272 0.881928 1280 0.980192 1304 0.979229 1312 0.895408 1328 0.416583 1336 0.246268 1344 0.148314 1352 0.0979302 1360 0.0785189 1368 0.0700259 1376 0.0597217 1384 0.0388686 1392 0.0430042 1400 0.0669384 1408 0.0905004 1416 0.101142 1424 0.0978621 1440 0.0223786 1456 0.00965784 1472 0.0808754 1480 0.157315 1488 0.273439 1496 0.413257 1504 0.534683 1512 0.642082 1520 0.737831 1536 0.88803 1544 0.939401 1552 0.966886 1568 0.893759 1576 0.787104 1600 0.230206 1632 0.0310549 1664 0.643836 1712 0.963642 1720 0.959628 1728 0.952646 1736 0.951204 1744 0.953854 1752 0.960602 1760 0.964831 1776 0.966029 1784 0.93364 1792 0.835029 1808 0.36657 1816 0.127405 1856 0.638062 1872 0.919006 1888 0.961884 1896 0.933126 1904 0.886125 1912 0.830151 1920 0.775842 1928 0.730981 1936 0.701707 1944 0.69371 1952 0.710831 1960 
0.761638 1968 0.85125 1984 0.938263 2000 0.704899 2008 0.649292 2016 0.625723 2032 0.653657 2040 0.695691 2048 0.74723 2056 0.807337 2064 0.878512 2072 0.936449 2088 0.966208 2096 0.963861 2104 0.933788 2112 0.857856 2120 0.724303 2128 0.512884 2136 0.228165 2144 0.058633 2160 0.0572939"}
,{"hock.trk", 113.375, 1, " 0 0.640129 8 0.262328 16 0.0797911 32 0.0579235 40 0.0736937 48 0.079635 56 0.0784545 64 0.0754491 80 0.0621482 88 0.0535624 104 0.0427975 128 0.134435 136 0.29354 176 0.88902 192 0.392875 200 0.208827 208 0.0952678 232 0.0484553 240 0.0633315 256 0.109475 272 0.170308 288 0.227508 296 0.252473 304 0.274263 320 0.306389 336 0.318747 352 0.317702 368 0.311962 384 0.316882 408 0.363552 416 0.387113 448 0.499262 456 0.532133 472 0.581498 480 0.590945 488 0.592289 496 0.587549 512 0.562657 528 0.520433 544 0.458778 560 0.374037 576 0.259037 592 0.129554 600 0.0750951 608 0.0433605 624 0.0541136 640 0.218334 656 0.611599 672 0.994501 680 0.914007 688 0.621907 696 0.250757 720 0.149509 728 0.449713 744 0.865213 752 0.968238 760 0.993991 768 0.960426 784 0.766655 800 0.632237 816 0.591913 824 0.602163 832 0.629316 840 0.670656 848 0.721785 856 0.777516 864 0.832097 880 0.911764 896 0.930957 904 0.917701 912 0.893024 928 0.817479 936 0.764385 944 0.698826 960 0.52366 968 0.427381 976 0.338081 984 0.252609 992 0.174639 1000 0.108749 1008 0.0644235 1016 0.0460377 1032 0.0492562 1040 0.0997761 1048 0.213061 1056 0.411685 1064 0.72487 1080 0.9611 1088 0.68622 1112 0.224393 1120 0.549911 1128 0.858886 1136 0.987786 1152 0.872644 1184 0.588443 1216 0.141488 1224 0.078314 1232 0.0469791 1248 0.0478062 1256 0.0623326 1264 0.0767933 1272 0.0818434 1280 0.0698862 1288 0.0473379 1296 0.041453 1312 0.0629086 1328 0.110779 1344 0.169861 1376 0.297485 1408 0.426808 1440 0.560333 1472 0.695146 1488 0.762051 1504 0.829022 1520 0.8962 1528 0.926475 1536 0.948227 1544 0.957252 1560 0.951933 1568 0.903528 1584 0.608661 1592 0.327392 1600 0.0546113 1616 0.189962 1624 0.463731 1632 0.788085 1640 0.971914 1656 0.7941 1664 0.446083 1672 0.192528 1696 0.0361369 1704 0.133174 1712 0.272391 1720 0.391545 1728 0.492819 1736 0.578795 1744 0.646963 1752 0.692213 1760 0.716895 1768 0.725304 1776 0.720027 1792 0.666504 1808 0.571013 1824 0.455683 1832 0.396594 1840 0.338333 1848 0.280634 1856 0.224191 1864 0.169281 1872 0.1
21361 1880 0.0769295 1888 0.0444265 1904 0.0550072 1912 0.111303 1920 0.221853 1928 0.41035 1936 0.679824 1968 0.952015 1984 0.731653 1992 0.753458 2000 0.876712 2008 0.930475 2016 0.840346 2024 0.553069 2032 0.174256 2040 0.0337582 2056 0.0746397 2064 0.296733 2136 0.87632 2152 0.871543 2160 0.516278 2168 0.387171 2176 0.482581 2184 0.808714"}
,{"kimla01.trk", 139.525, 1, " 0 0.804711 32 0.973489 56 0.964913 64 0.970582 80 0.968519 96 0.309949 104 0.0654396 112 0.00772493 128 0.418112 136 0.847617 152 0.971482 160 0.92942 168 0.86869 176 0.796178 184 0.714868 192 0.631195 200 0.532236 208 0.400492 216 0.241098 232 0.00925564 248 0.349018 256 0.542138 272 0.797655 288 0.942841 296 0.975232 304 0.981036 320 0.90961 328 0.828931 336 0.71574 352 0.241881 384 0.142878 400 0.0553578 424 0.0420109 448 0.165808 480 0.543613 496 0.81173 504 0.896056 512 0.941143 544 0.884998 592 0.0846211 608 0.534888 624 0.793421 640 0.798081 672 0.725384 688 0.935141 696 0.98008 736 0.568214 752 0.536974 760 0.587718 768 0.616956 776 0.59495 784 0.511412 792 0.364764 800 0.234797 816 0.0886545 832 0.0286248 864 0.0488111 872 0.094403 896 0.363788 912 0.673981 920 0.852924 928 0.952879 944 0.979681 960 0.945813 976 0.883283 984 0.845643 992 0.805694 1000 0.76486 1008 0.722875 1016 0.677947 1024 0.626645 1032 0.563626 1040 0.47791 1048 0.372514 1056 0.250824 1064 0.111765 1080 0.0362623 1088 0.130726 1104 0.508039 1112 0.729732 1120 0.868731 1136 0.985973 1152 0.994134 1184 0.992727 1208 0.988382 1216 0.968891 1224 0.905008 1232 0.57087 1240 0.0789671 1256 0.0866511 1264 0.640395 1280 0.975693 1288 0.982755 1296 0.991175 1312 0.993891 1344 0.984835 1360 0.980948 1408 0.932143 1464 0.55562 1504 0.0130085 1520 0.319889 1536 0.839354 1544 0.950027 1560 0.978749 1568 0.96846 1592 0.931036 1600 0.925136 1608 0.92385 1624 0.930134 1632 0.942012 1640 0.951131 1664 0.981594 1672 0.952197 1688 0.683069 1696 0.427694 1704 0.168909 1720 0.0216323 1728 0.078745 1736 0.219883 1744 0.357755 1760 0.23626 1792 0.170118 1808 0.72516 1816 0.896786 1824 0.973898 1840 0.938078 1856 0.764108 1872 0.546643 1888 0.317404 1896 0.206593 1904 0.110393 1912 0.0400741 1920 0.017935 1936 0.187063 1944 0.393424 1952 0.702297 1968 0.988761 1984 0.841405 2000 0.646724 2016 0.929203 2048 0.453185 2080 0.031867 2088 0.07429 2096 0.14657 2112 0.355684 2128 0.60081 2136 0.721133 2144 0.83143 2152 0.91908 2160 0.9
66454 2168 0.957443 2192 0.473585 2208 0.0388989 2216 0.00823116 2224 0.0790189 2232 0.252922 2240 0.465296 2248 0.523804 2256 0.427036 2272 0.0647949 2304 0.403039 2320 0.895396 2328 0.974489 2336 0.981603 2344 0.955311 2352 0.904274 2368 0.727969 2376 0.645531 2384 0.600888 2392 0.59511 2400 0.628461 2416 0.68615 2424 0.619858 2432 0.590071 2440 0.599999 2448 0.655256 2464 0.892213 2472 0.990106 2480 0.933649 2496 0.762378 2504 0.74563 2512 0.745023 2520 0.726818 2528 0.68742 2560 0.929642 2568 0.974169 2592 0.689988 2608 0.212711 2624 0.0230944"}
,{"ra.trk", 104.201, 1, " 0 0.685751 8 0.271706 16 0.0829918 32 0.0646062 64 0.134087 72 0.149643 88 0.178951 128 0.222635 144 0.233148 168 0.248273 208 0.271147 240 0.284178 256 0.284291 272 0.282816 288 0.277016 304 0.2529 320 0.20537 336 0.143919 352 0.0922881 368 0.0601843 384 0.0496048 392 0.0682429 400 0.151843 408 0.336305 416 0.647616 424 0.881054 432 0.982337 440 0.967108 464 0.243829 480 0.0507707 496 0.0506195 512 0.052592 544 0.0832744 552 0.248495 560 0.600907 568 0.889705 592 0.650894 608 0.088251 624 0.0758725 640 0.182063 656 0.330398 672 0.510942 688 0.725947 704 0.945186 712 0.965354 720 0.913941 728 0.792715 736 0.659974 752 0.470395 768 0.375042 784 0.354096 832 0.443694 840 0.497216 848 0.569275 856 0.642208 864 0.71269 872 0.775262 880 0.831007 896 0.908042 912 0.945049 928 0.936133 936 0.847346 944 0.626854 952 0.245901 960 0.0402952 976 0.17179 992 0.855531 1008 0.94875 1016 0.949228 1024 0.858154 1032 0.602636 1040 0.202467 1048 0.0206109 1072 0.71237 1088 0.941653 1096 0.86305 1104 0.762229 1112 0.742996 1120 0.833333 1136 0.990132 1152 0.80886 1168 0.309471 1176 0.140611 1184 0.0605435 1208 0.265737 1216 0.449548 1224 0.647968 1232 0.801988 1240 0.896693 1248 0.943664 1256 0.942001 1264 0.851585 1280 0.267299 1312 0.47126 1320 0.788523 1328 0.927892 1336 0.919462 1344 0.817151 1352 0.813376 1360 0.911163 1368 0.970535 1376 0.991025 1392 0.987648 1400 0.981179 1424 0.953042 1432 0.952057 1440 0.960774 1456 0.986335 1472 0.936437 1480 0.853459 1496 0.521409 1504 0.269467 1512 0.108241 1528 0.0574404 1536 0.0919166 1552 0.220999 1560 0.31289 1568 0.4242 1576 0.559004 1584 0.698674 1592 0.802382 1600 0.87404 1608 0.923058 1616 0.953427 1632 0.985155 1648 0.982896 1664 0.932105 1680 0.798985 1688 0.706759 1696 0.643759 1704 0.604678 1712 0.582985 1728 0.574055 1744 0.584067 1752 0.582489 1760 0.56924 1776 0.503809 1784 0.443336 1792 0.353583 1800 0.230865 1808 0.0824799 1816 0.00963081 1824 0.0366594 1856 0.122192 1896 0.0607009 1904 0.144127 1920 0.832453 1936 0.834125 1952 0.4308 1968 0.12
2001 1984 0.122134 1992 0.0484714 2008 0.0291388 2016 0.110718 2032 0.439112 2040 0.519084 2048 0.497594 2056 0.383699 2064 0.20567 2088 0.11355 2096 0.335621 2112 0.974704"}
,{"silver97.trk", 92.671, 1, " 0 0.64491 8 0.483219 16 0.367201 24 0.281076 40 0.153157 48 0.10598 56 0.0749989 64 0.0600904 80 0.0543202 96 0.0580786 104 0.0548187 120 0.0771651 128 0.199074 160 0.843357 176 0.375327 192 0.133631 208 0.0583821 224 0.0570833 232 0.0649235 240 0.0788303 256 0.130633 272 0.201957 280 0.244362 288 0.291613 296 0.330848 304 0.344341 320 0.217975 344 0.196167 352 0.489047 376 0.742643 384 0.519796 392 0.409215 400 0.283932 416 0.0233385 432 0.0716315 440 0.213417 448 0.442207 456 0.766848 464 0.94672 480 0.884645 488 0.589759 496 0.239541 504 0.0789099 512 0.0340358 520 0.00685056 528 0.0351311 536 0.128816 544 0.298278 552 0.449007 560 0.545446 568 0.605281 576 0.638369 584 0.652134 592 0.652573 608 0.625887 624 0.574996 640 0.511451 656 0.438238 672 0.359698 704 0.198504 720 0.121143 728 0.0871544 736 0.0643935 744 0.0557185 768 0.0933749 776 0.227056 784 0.523859 792 0.817242 800 0.95986 816 0.896961 832 0.265937 856 0.154864 864 0.248267 880 0.435028 896 0.626685 904 0.721417 912 0.812614 920 0.89404 928 0.933773 944 0.908659 952 0.716075 960 0.234091 976 0.225893 984 0.719226 992 0.938183 1008 0.917626 1024 0.482267 1040 0.317749 1056 0.274493 1064 0.243936 1072 0.180172 1080 0.0829021 1088 0.052907 1096 0.0748137 1104 0.126225 1112 0.193485 1120 0.269282 1128 0.349022 1136 0.432405 1152 0.600833 1160 0.681835 1168 0.757256 1176 0.826694 1184 0.888288 1192 0.923322 1200 0.94326 1208 0.946271 1216 0.914235 1224 0.74556 1232 0.324237 1240 0.0254993 1248 0.0742126 1256 0.497455 1264 0.844418 1280 0.536921 1296 0.0634974 1304 0.0558333 1312 0.059862 1320 0.0588782 1328 0.0597222 1336 0.163109 1344 0.405256 1352 0.754825 1376 0.863991 1384 0.707384 1392 0.694974 1400 0.744916 1408 0.674752 1424 0.0819237 1440 0.20874 1456 0.897858 1464 0.946632 1472 0.880551 1480 0.642803 1488 0.200312 1496 0.0159575 1504 0.0567161 1536 0.827973 1544 0.956833 1552 0.989687 1560 0.929857 1568 0.876089 1576 0.916435 1584 0.982183 1592 0.976041 1600 0.838992 1616 0.181414 1624 0.0607274 1632 0.0604069 16
40 0.110795 1648 0.209642 1656 0.358074 1664 0.560076 1672 0.754144 1680 0.882738 1688 0.958355 1696 0.990907 1704 0.981113"}
,{"suzuka.trk", 99.7749, 1, " 0 0.474473 8 0.290568 16 0.163406 24 0.0862128 32 0.0492284 64 0.0523322 80 0.0620143 112 0.0721052 128 0.0730491 144 0.0649676 152 0.0593193 160 0.0519611 168 0.0435622 176 0.0416184 184 0.0768657 192 0.155737 200 0.281756 208 0.460667 216 0.705052 224 0.900223 232 0.98582 240 0.982867 256 0.752014 264 0.670748 272 0.781431 280 0.950288 304 0.707276 320 0.0947613 344 0.223713 352 0.25558 368 0.0307814 384 0.149158 400 0.815322 416 0.964223 424 0.753636 432 0.528326 440 0.40127 448 0.239908 480 0.0763288 488 0.215522 496 0.438674 504 0.732474 512 0.914316 536 0.884446 544 0.675454 552 0.38225 560 0.226494 568 0.115834 576 0.0497535 584 0.0186891 608 0.034768 624 0.148633 640 0.164155 656 0.111943 688 0.0147471 696 0.022818 704 0.054801 712 0.116537 720 0.161266 728 0.161011 736 0.132946 744 0.0908575 752 0.0491574 768 0.071505 776 0.162987 784 0.336342 792 0.620241 800 0.828267 808 0.939848 816 0.989929 832 0.71759 848 0.0928615 864 0.0485421 872 0.0719605 880 0.104141 888 0.143271 896 0.189479 904 0.246707 912 0.315885 920 0.40391 928 0.536666 936 0.723897 944 0.874972 960 0.99429 968 0.948971 976 0.858938 984 0.682347 992 0.332427 1000 0.0779894 1016 0.0467848 1024 0.265969 1032 0.706985 1040 0.919031 1056 0.893679 1088 0.562076 1120 0.882877 1152 0.982216 1184 0.830072 1216 0.828318 1232 0.879534 1248 0.940135 1256 0.924861 1264 0.831438 1272 0.675512 1280 0.45175 1288 0.20767 1296 0.065058 1304 0.00789969 1312 0.0227283 1328 0.217449 1344 0.367419 1352 0.224712 1360 0.103186 1376 0.00955946 1384 0.0765192 1408 0.817182 1416 0.939586 1424 0.958951 1432 0.924923 1440 0.850548 1448 0.747432 1456 0.624505 1472 0.399523 1488 0.235685 1504 0.149313 1520 0.147474 1536 0.231626 1568 0.466567 1576 0.522125 1600 0.682264 1616 0.776353 1632 0.854667 1640 0.889742 1648 0.926126 1656 0.956003 1664 0.954724 1672 0.90511 1696 0.392849 1712 0.052892 1728 0.0429528 1760 0.520852 1792 0.137836 1816 0.134947 1824 0.301939 1832 0.580927 1848 0.974523 1856 0.634747 1864 0.0515068 1872 0.0361251 1880 
0.363933 1888 0.615738 1896 0.787312 1904 0.903891 1912 0.970995 1920 0.989598 1936 0.884173"}
#endif
};

/////////////////////////////////////////////////////////////////////////////
// Some utility macros and functions
/////////////////////////////////////////////////////////////////////////////
#ifdef VERBOSE
#define OUTPUT(x) do {(cout << "K1999: " << x << '\n').flush();} while(0)
#else
#define OUTPUT(x)
#endif

#define FATAL(x) do{if (x){OUTPUT("Fatal error: " << #x); exit(1);}}while(0)

static double Mag(double x, double y)
{
 return sqrt(x * x + y * y);
}

static double Min(double x1, double x2)
{
 if (x1 < x2)
  return x1;
 else
  return x2;
}

static double Max(double x1, double x2)
{
 if (x1 < x2)
  return x2;
 else
  return x1;
}

/////////////////////////////////////////////////////////////////////////////
// Global data
/////////////////////////////////////////////////////////////////////////////
const int MaxDivs = 5000;

static double TireAccel;
static track_desc Track;
static int Divs;
static double TrackLength;
static double tDistance[MaxDivs];
static double txLeft[MaxDivs];
static double tyLeft[MaxDivs];
static double txRight[MaxDivs];
static double tyRight[MaxDivs];

/////////////////////////////////////////////////////////////////////////////
// Find largest index before Dist
/////////////////////////////////////////////////////////////////////////////
static int GetIndex(double Dist, int Hint = 0)
{
 while (Dist > Track.length)
  Dist -= Track.length;
 while (Dist < 0)
  Dist += Track.length;

 int i = Hint;

 while (1)
 {
  double d0 = tDistance[i];
  double d = Dist;
  double d1 = tDistance[(i + 1) % Divs];

  if (d0 > d1)
  {
   d1 += Track.length;
   if (d0 > d)
    d += Track.length;
  }

  if (d0 <= d && d <= d1)
   break;
  i = (i + 1) % Divs;
  FATAL(i == Hint);
 }

 return i;
}

/////////////////////////////////////////////////////////////////////////////
// Class for cubic and linear interpolation
/////////////////////////////////////////////////////////////////////////////
class CInterpolationContext // ic
{
 public:
  CInterpolationContext() : i1(0) {}
  void SetDistance(double Dist);

  int i0;
  int i1;
  int i2;
  int i3;
  double d0;
  double d1;
  double d2;
  double d3;
  double t;
  double a0;
  double a1;
  double a2;
  double a3;

  double CubicInterpolation(const double *pd) const;
  double LinearInterpolation(const double *pd) const;
};

/////////////////////////////////////////////////////////////////////////////
// Find discrete position for interpolation context
/////////////////////////////////////////////////////////////////////////////
void CInterpolationContext::SetDistance(double Dist)
{
 i1 = GetIndex(Dist, i1);
 i0 = (i1 + Divs - 1) % Divs;
 i2 = (i1 + 1) % Divs;
 i3 = (i1 + 2) % Divs;

 d0 = tDistance[i0];
 d1 = tDistance[i1];
 d2 = tDistance[i2];
 d3 = tDistance[i3];

 if (d0 > d1)
  d0 -= Track.length;
 if (d1 > Dist)
 {
  d0 -= Track.length;
  d1 -= Track.length;
 }
 if (Dist > d2)
 {
  d2 += Track.length;
  d3 += Track.length;
 }
 if (d2 > d3)
  d3 += Track.length;

 t = (Dist - d1) / (d2 - d1);
 a0 = (1 - t) * (1 - t) * (1 - t);
 a1 = 3 * (1 - t) * (1 - t) * t;
 a2 = 3 * (1 - t) * t * t;
 a3 = t * t * t;
}

/////////////////////////////////////////////////////////////////////////////
// class to hold a path for a single car
/////////////////////////////////////////////////////////////////////////////
class CK1999Path // path
{
 public:
  double tx[MaxDivs];
  double ty[MaxDivs];
  double tCurvature[MaxDivs];
  double tMaxSpeed[MaxDivs];
  double tSpeed[MaxDivs];
  double tEstimatedSpeed[MaxDivs];
  double tLane[MaxDivs];
  int tfConst[MaxDivs];

  enum {K1999, K2001, Passing}; // types of path shape

  void UpdateTxTy(int i);
  void Reset();
  void DrawPath(ostream &out) const;
  double GetCurvature(int prev, double x, double y, int next) const;
  void AnalyzePath(int Step = 1);
  void AnticipateBraking(int Step = 1);
  double EstimateSpeed(int Step = 1);
  void AdjustRadius(int prev,
                    int i,
                    int next,
                    double TargetCurvature,
                    double Security = 0);
  void Smooth(int Step, int PathType);
  void StepInterpolate(int iMin, int iMax, int Step);
  void Interpolate(int Step);
  void ComputeFullPath(int PathType);
  double GetTanTheta(const CInterpolationContext &ic) const;
  double GetGamma(const CInterpolationContext &ic) const;
  void Optimize();
};

static CK1999Path pathK1999;
static CK1999Path pathK2001;
static CK1999Path pathEmergency;

/////////////////////////////////////////////////////////////////////////////
// Update tx and ty arrays
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::UpdateTxTy(int i)
{
 tx[i] = tLane[i] * txRight[i] + (1 - tLane[i]) * txLeft[i];
 ty[i] = tLane[i] * tyRight[i] + (1 - tLane[i]) * tyLeft[i];
}

/////////////////////////////////////////////////////////////////////////////
// Initialize a path to be in the middle of the track
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::Reset()
{
 for (int i = Divs; --i >= 0;)
 {
  tLane[i] = 0.5;
  tfConst[i] = 0;
  UpdateTxTy(i);
 }
}

/////////////////////////////////////////////////////////////////////////////
// Maximum friction
/////////////////////////////////////////////////////////////////////////////
static const double tFriction[] = {0.95 * MYU_MAX0,
                                   0.9999 * MYU_MAX1,
                                   0.9999 * MYU_MAX2};

/////////////////////////////////////////////////////////////////////////////
// Inverse friction function
/////////////////////////////////////////////////////////////////////////////
static double InverseFriction(double a)
{
 switch( args.m_iSurface )
 {
  case 0: ///////////////////////////////////////////////////////////////////
   FATAL(a >= MYU_MAX0);
   return SLIPPING * a / (MYU_MAX0 - a);
  break;

  case 1: ///////////////////////////////////////////////////////////////////
   FATAL(a >= MYU_MAX1);
   return -SLIPPING * log(1 - a / MYU_MAX1);
  break;

  case 2: ///////////////////////////////////////////////////////////////////
   FATAL(a >= MYU_MAX2);
   return Min(20, -SLIPPING * log(1 - a / MYU_MAX2));
  break;

  default: //////////////////////////////////////////////////////////////////
   FATAL(1);
 }

 return 0;
}

/////////////////////////////////////////////////////////////////////////////
// Get control from acceleration
/////////////////////////////////////////////////////////////////////////////
static double GetControl(double At,
                         double An,
                         double v,
                         double mass,
                         con_vec &result)
{
 int fAdjustP = 0;
 double At1 = 0;
 double P1 = 0;
 double At0 = 0;
 double P0 = 0;
 int Loops = 0;

 while(1)
 {
  if (++Loops >= 40)
  {
   OUTPUT("Control problem");
   return At0;
  }

  double A = Mag(At, An);
  if (A > 0)
  {
   double L = InverseFriction(A / g);
   double SinTheta = An / A;
   double CosTheta = At / A;
   result.alpha = atan((L * SinTheta) / (L * CosTheta + v));
   result.vc = (L * CosTheta + v) / cos(result.alpha);
   double x = cos(result.alpha) * CosTheta + sin(result.alpha) * SinTheta;
   double P = A * mass * result.vc * x;
   
   if (At < 0 || (!fAdjustP && P < PM) || (fAdjustP && P < PM && P > 0.999 * PM))
    break;

   if (!fAdjustP)
   {
    fAdjustP = 1;
    At1 = At;
    P1 = P;
   }
   else
   {
    if (P >= PM)
    {
     At1 = At;
     P1 = P;
    }
    else
    {
     At0 = At;
     P0 = P;
    }
   }

   At = At0 + (0.9995 * PM - P0) * (At1 - At0) / (P1 - P0);
  }
  else
  {
   result.alpha = 0;
   result.vc = 0;
  }
 }

 return At;
}

/////////////////////////////////////////////////////////////////////////////
// Draw a path (use gnuplot)
/////////////////////////////////////////////////////////////////////////////
#ifdef WRITE_FILES
void CK1999Path::DrawPath(ostream &out) const
{
 for (int i = 0; i <= Divs; i++)
 {
  int j = i % Divs;
  out << txLeft[j] << ' ' << tyLeft[j] << ' ';
  out << tx[j] << ' ' << ty[j] << ' ';
  out << txRight[j] << ' ' << tyRight[j] << '\n';
 }
 out << '\n';
}
#endif

/////////////////////////////////////////////////////////////////////////////
// Split the track into slices
/////////////////////////////////////////////////////////////////////////////
static void SplitTrack()
{
 double DivLength = 10.0;
lblRetry:
 double Distance = 0;
 double Angle = 0;
 double xPos = 0;
 double yPos = 0;

 Divs = 0;
 for (int i = 0; i < Track.NSEG; i++)
 {
  double Length;
  if (Track.rgtwall[i].radius == 0.0)
   Length = Track.rgtwall[i].length;
  else
   Length = fabs(Track.rgtwall[i].radius - Track.width / 2) *
            Track.rgtwall[i].length;

  int Divisions = 1 + int(Length / DivLength);

  for (int j = Divisions; --j >= 0;)
  {
   double cosine = cos(Angle);
   double sine = sin(Angle);
   double Step = Track.rgtwall[i].length / Divisions;

   if (Track.rgtwall[i].radius == 0.0)
   {
    Distance += Step;
    xPos += cosine * Step;
    yPos += sine * Step;
   }
   else
   {
    double r = Track.rgtwall[i].radius;
    double Theta = Step;
    if (r < 0)
    {
     r = -r;
     Theta = -Theta;
    }

    double L = Track.rgtwall[i].radius * 2 * sin(Theta / 2);
    double x = L * cos(Theta / 2);
    double y = L * sin(Theta / 2);

    xPos += x * cosine - y * sine;
    yPos += x * sine + y * cosine;

    Angle += Theta;
    Distance += fabs((Track.rgtwall[i].radius - Track.width / 2)) * Step;
   }
 
   txLeft[Divs] = xPos - Track.width * sin(Angle);
   tyLeft[Divs] = yPos + Track.width * cos(Angle);
   txRight[Divs] = xPos;
   tyRight[Divs] = yPos;
   tDistance[Divs] = Distance;

   Divs++;
   if (Divs > MaxDivs)
   {
    DivLength *= 2;
    OUTPUT("DivLength = " << DivLength);
    goto lblRetry;
   }
  }  
 }

 OUTPUT("Position of the last point (should be (0, 0))");
 OUTPUT("xPos = " << xPos);
 OUTPUT("yPos = " << yPos);

 //
 // Handle cases where the last segment overlaps with the first
 //
 pathK1999.Reset();
 {
  double dx = pathK1999.tx[1] - pathK1999.tx[0];
  double dy = pathK1999.ty[1] - pathK1999.ty[0];
  while(1)
  {
   double s = (pathK1999.tx[Divs - 1] - pathK1999.tx[0]) * dx +
              (pathK1999.ty[Divs - 1] - pathK1999.ty[0]) * dy;
   if (s > 0.0)
   {
    Divs--;
    OUTPUT("Path element removed because of segment overlap");
   }
   else
    break;
  }
 }

 TrackLength = Distance;
 OUTPUT("Number of path elements : " << Divs);
 OUTPUT("Track length : " << TrackLength);
}

/////////////////////////////////////////////////////////////////////////////
// Generic function for curvature of a triangle
/////////////////////////////////////////////////////////////////////////////
static double Curvature(double xp, double yp,
                        double x, double y,
                        double xn, double yn)
{
 double x1 = xn - x;
 double y1 = yn - y;
 double x2 = xp - x;
 double y2 = yp - y;
 double x3 = xn - xp;
 double y3 = yn - yp;

 double det = x1 * y2 - x2 * y1;
 double n1 = x1 * x1 + y1 * y1;
 double n2 = x2 * x2 + y2 * y2;
 double n3 = x3 * x3 + y3 * y3;
 double nnn = sqrt(n1 * n2 * n3);

 return 2 * det / nnn;
}

/////////////////////////////////////////////////////////////////////////////
// Compute the curvature
/////////////////////////////////////////////////////////////////////////////
double CK1999Path::GetCurvature(int prev, double x, double y, int next) const
{
 return Curvature(tx[prev], ty[prev], x, y, tx[next], ty[next]);
}

/////////////////////////////////////////////////////////////////////////////
// First pass of path analysis : compute radius ...
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::AnalyzePath(int Step)
{
 int prev = ((Divs - Step) / Step) * Step;
 int next = Step;

 for (int i = 0; i <= Divs - Step; i += Step)
 {
  double Curvature = GetCurvature(prev, tx[i], ty[i], next);

  double MaxSpeed;
  if (fabs(Curvature) > TireAccel / (300 * 300))
   MaxSpeed = sqrt(TireAccel / fabs(Curvature));
  else
   MaxSpeed = 300;

  tCurvature[i] = Curvature;
  tMaxSpeed[i] = MaxSpeed;
  tSpeed[i] = tMaxSpeed[i];

  prev = i;
  next += Step;
  if (next > Divs - Step)
   next = 0;
 }
}

/////////////////////////////////////////////////////////////////////////////
// Anticipate braking
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::AnticipateBraking(int Step)
{
 const int last = ((Divs - Step) / Step) * Step;
 for (int i = last; i -= Step >= 0;)
 {
  int prev = i - Step;
  if (prev < 0)
   prev = last;

  double dx = tx[i] - tx[prev];
  double dy = ty[i] - ty[prev];
  double dist = Mag(dx, dy);
  for (int j = 10; --j >= 0;)
  {
   double Speed = (tSpeed[i] + tSpeed[prev]) / 2;
   double LatA = Speed * Speed * (tCurvature[prev] + tCurvature[i]) / 2;
   double TanA2 = TireAccel * TireAccel - LatA * LatA;
   double TanA = (TanA2 < 0 ? 0 : sqrt(TanA2));
   double Drag = (DRAG_CON * Speed * Speed) / (M + MAX_FUEL / g);
   double Time = dist / Speed;
   double MaxSpeed = tSpeed[i] + (TanA + Drag) * Time;
   if (MaxSpeed < tMaxSpeed[prev])
    tSpeed[prev] = MaxSpeed;
   else
   {
    tSpeed[prev] = tMaxSpeed[prev];
    break;
   }
  }
 }
}

/////////////////////////////////////////////////////////////////////////////
// Estimate average lap speed
/////////////////////////////////////////////////////////////////////////////
double CK1999Path::EstimateSpeed(int Step)
{
 double TotalTime;
 const int last = ((Divs - Step) / Step) * Step;
 tEstimatedSpeed[last] = tSpeed[last];
 for (int j = 2; --j >= 0;)
 {
  TotalTime = 0;
  for (int i = 0, prev = last; i < Divs; prev = i, i += Step)
  { // ??? should iterate like when braking ?
   double Speed = tEstimatedSpeed[prev];
   double Drag = (DRAG_CON * Speed * Speed) / M;
   double Dist = Mag(tx[i] - tx[prev], ty[i] - ty[prev]);
   double Time = Dist / Speed;

   double LatA = Speed * Speed * (tCurvature[prev] + tCurvature[i]) / 2;
#if 0
   double TanA = PM / (M * Speed);
#else
   double TanA2 = TireAccel * TireAccel - LatA * LatA;
   double TanA = (TanA2 > 0 ? sqrt(TanA2) : 0);
   if (TanA2 < 0)
    if (LatA > 0)
     LatA = TireAccel;
    else
     LatA = -TireAccel;
   con_vec result;
   TanA = GetControl(TanA, LatA, Speed, M, result);
#endif

   TotalTime += Time;
   tEstimatedSpeed[i] = Min(tSpeed[i],
                            tEstimatedSpeed[prev] + Time * (TanA - Drag));
  }
 }

 return MPH_FPS * TrackLength / TotalTime;
}

/////////////////////////////////////////////////////////////////////////////
// Change lane value to reach a given radius
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::AdjustRadius(int prev,
                              int i,
                              int next,
                              double TargetCurvature,
                              double Security)
{
 double OldLane = tLane[i];

 //
 // Start by aligning points for a reasonable initial lane
 //
 tLane[i] = (-(ty[next] - ty[prev]) * (txLeft[i] - tx[prev]) +
              (tx[next] - tx[prev]) * (tyLeft[i] - ty[prev])) /
            ( (ty[next] - ty[prev]) * (txRight[i] - txLeft[i]) -
              (tx[next] - tx[prev]) * (tyRight[i] - tyLeft[i]));
 if (tLane[i] < -0.1)
  tLane[i] = 0;
 else if (tLane[i] > 1.1)
  tLane[i] = 1;
 UpdateTxTy(i);

 //
 // Newton-like resolution method
 //
 const double dLane = 0.0001;

 double dx = dLane * (txRight[i] - txLeft[i]);
 double dy = dLane * (tyRight[i] - tyLeft[i]);

 double dCurvature = GetCurvature(prev, tx[i] + dx, ty[i] + dy, next);
  
 if (dCurvature > 0.000000001)
 {
  tLane[i] += (dLane / dCurvature) * TargetCurvature;

  double ExtLane = (SideDistExt + Security) / Track.width;
  double IntLane = (SideDistInt + Security) / Track.width;
  if (ExtLane > 0.5)
   ExtLane = 0.5;
  if (IntLane > 0.5)
   IntLane = 0.5;

  if (TargetCurvature >= 0.0)
  {
   if (tLane[i] < IntLane)
    tLane[i] = IntLane;
   if (1 - tLane[i] < ExtLane)
   {
    if (1 - OldLane < ExtLane)
     tLane[i] = Min(OldLane, tLane[i]);
    else
     tLane[i] = 1 - ExtLane;
   }
  }
  else
  {
   if (tLane[i] < ExtLane)
   {
    if (OldLane < ExtLane)
     tLane[i] = Max(OldLane, tLane[i]);
    else
     tLane[i] = ExtLane;
   }
   if (1 - tLane[i] < IntLane)
    tLane[i] = 1 - IntLane;
  }
 }

 UpdateTxTy(i);
}

/////////////////////////////////////////////////////////////////////////////
// Smooth path
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::Smooth(int Step, int PathType)
{
 int prev1 = ((Divs - Step) / Step) * Step;
 int prev2 = prev1 - Step;
 int prev3 = prev2 - Step;
 int next1 = Step;
 int next2 = next1 + Step;
 int next3 = next2 + Step;

 FATAL(prev3 <= next3);

 for (int i = 0; i <= Divs - Step; i += Step)
 {
  if (!tfConst[i])
  {
   double c1 = GetCurvature(prev2, tx[prev1], ty[prev1], i);
   double c2 = GetCurvature(i, tx[next1], ty[next1], next2);
   double l1 = Mag(tx[i] - tx[prev1], ty[i] - ty[prev1]);
   double l2 = Mag(tx[i] - tx[next1], ty[i] - ty[next1]);
   double CPrime2 = 0;

   if (c1 * c2 > 0)
   {
    double ac1 = fabs(c1);
    double ac2 = fabs(c2);
    double v = sqrt(TireAccel * 2 / (ac1 + ac2));

    switch (PathType)
    {
     case Passing: // Very aggressive braking
      if (ac1 < ac2)
       c1 *= 0.985;
      else if (v > tEstimatedSpeed[i] + 8)
       c2 += 0.3 * (c1 - c2);
     break;

     case K2001: // Not optimal, but makes passing easier and being passed harder
      if (ac1 < ac2)
       c1 *= 0.995;
      else if (v > tEstimatedSpeed[i] + 8)
       c2 += 0.3 * (c1 - c2);
     break;

     case K1999: // The fastest (I have found)
      if (v > tEstimatedSpeed[i] + 8)
      {
       if (ac1 < ac2)
        c1 += 0.3 * (c2 - c1);
       else if (ac2 < ac1)
        c2 += 0.3 * (c1 - c2);
      }
#if 0
      else
      {
       double c = (c1 + c2) / 2;
       if (ac1 < ac2)
        CPrime2 = 6 * c * c * c;
       else if (ac2 < ac1)
        CPrime2 = 14.04 * 6 * c * c * c * c;
      }
#endif
     break;
    }
   }

   double TargetCurvature = (l2 * c1 + l1 * c2) / (l2 + l1) - 0.5 * l1 * l2 * CPrime2;
   double Security = l1 * l2 / (8 * SecurityR);
   AdjustRadius(prev1, i, next1, TargetCurvature, Security);
  }

  prev3 = prev2;
  prev2 = prev1;
  prev1 = i;
  next1 = next2;
  next2 = next3;
  next3 = next3 + Step;
  if (next3 > Divs - Step)
   next3 = 0;
 }
}

/////////////////////////////////////////////////////////////////////////////
// Interpolate between two control points
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::StepInterpolate(int iMin, int iMax, int Step)
{
 int next = (iMax + Step) % Divs;
 if (next > Divs - Step)
  next = 0;

 int prev = (((Divs + iMin - Step) % Divs) / Step) * Step;
 if (prev > Divs - Step)
  prev -= Step;

 double c0 = GetCurvature(prev, tx[iMin], ty[iMin], iMax % Divs);
 double c1 = GetCurvature(iMin, tx[iMax % Divs], ty[iMax % Divs], next);
 double v0 = tEstimatedSpeed[iMin];
 double v1 = tEstimatedSpeed[iMax];

 for (int k = iMax; --k > iMin;)
  if (!tfConst[k])
  {
   double x = double(k - iMin) / double(iMax - iMin);
   double TargetCurvature = x * c1 + (1 - x) * c0;
   AdjustRadius(iMin, k, iMax % Divs, TargetCurvature);
   tEstimatedSpeed[k] = x * v1 + (1 - x) * v0;
  }
}

/////////////////////////////////////////////////////////////////////////////
// Calls to StepInterpolate for the full path
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::Interpolate(int Step)
{
 if (Step > 1)
 {
  int i;
  for (i = Step; i <= Divs - Step; i += Step)
   StepInterpolate(i - Step, i, Step);
  StepInterpolate(i - Step, Divs, Step);
 }
}

/////////////////////////////////////////////////////////////////////////////
// Smoothing loops and speed profile
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::ComputeFullPath(int PathType)
{
 //
 // Smoothing loop
 //
 int MaxStep = 1;
 {
  int i = Divs / 10;
  while (i /= 2)
   MaxStep *= 2;
 }
 for (int Step = MaxStep; (Step /= 2) > 0;)
 {
  const int iter = Iterations * int(sqrt((float)Step)); 
  for (int i = iter; --i >= 0;)
  {
   Smooth(Step, PathType);
   if (i % 30 == 0)
   {
    AnalyzePath(Step);
    AnticipateBraking(Step);
    EstimateSpeed(Step);
   }
  }
  Interpolate(Step);
 }

 //
 // Compute speed profile
 //
 AnalyzePath();
 AnticipateBraking();
}

/////////////////////////////////////////////////////////////////////////////
// Interpolate between points with a line
/////////////////////////////////////////////////////////////////////////////
double CInterpolationContext::LinearInterpolation(const double *pd) const
{
 return pd[i1] * (1 - t) + pd[i2] * t;
}

/////////////////////////////////////////////////////////////////////////////
// Interpolate between points with a cubic spline
/////////////////////////////////////////////////////////////////////////////
double CInterpolationContext::CubicInterpolation(const double *pd) const
{
 double x0 = pd[i1];
 double x3 = pd[i2];
 double der1 = (pd[i2] - pd[i0]) * (d2 - d1) / (d2 - d0);
 double der2 = (pd[i3] - pd[i1]) * (d2 - d1) / (d3 - d1);
 double x1 = x0 + der1 / 3;
 double x2 = x3 - der2 / 3;

 return x0 * a0 + x1 * a1 + x2 * a2 + x3 * a3;
}

/////////////////////////////////////////////////////////////////////////////
// Compute tan(theta)
/////////////////////////////////////////////////////////////////////////////
double CK1999Path::GetTanTheta(const CInterpolationContext &ic) const
{
 double vx1 = tx[ic.i2] - tx[ic.i0];
 double vy1 = ty[ic.i2] - ty[ic.i0];
 double vx2 = tx[ic.i3] - tx[ic.i1];
 double vy2 = ty[ic.i3] - ty[ic.i1];
 double vx = ic.t * vx2 + (1 - ic.t) * vx1;
 double vy = ic.t * vy2 + (1 - ic.t) * vy1;

 double xLeft = ic.LinearInterpolation(txLeft);
 double xRight = ic.LinearInterpolation(txRight);
 double yLeft = ic.LinearInterpolation(tyLeft);
 double yRight = ic.LinearInterpolation(tyRight);

 double dx = xLeft - xRight;
 double dy = yLeft - yRight;

 return (vx * dx + vy * dy) / (Mag(dx, dy) * Mag(vx, vy));
}

/////////////////////////////////////////////////////////////////////////////
// Get gamma coefficient
/////////////////////////////////////////////////////////////////////////////
double CK1999Path::GetGamma(const CInterpolationContext &ic) const
{
 return (ic.d2 - ic.d1) / Mag(tx[ic.i2] - tx[ic.i1], ty[ic.i2] - ty[ic.i1]);
}

/////////////////////////////////////////////////////////////////////////////
// Optimize path by gradient descent
/////////////////////////////////////////////////////////////////////////////
void CK1999Path::Optimize()
{
 const double LaneMinInt = SideDistInt / Track.width;
 const double LaneMinExt = SideDistExt / Track.width;
 const double LaneMaxInt = 1 - LaneMinInt;
 const double LaneMaxExt = 1 - LaneMinExt;

 int IndexStep = 128;
 double LaneStep = 0.02;

 for (int Pass = 0; Pass <= 4; Pass++, LaneStep /= 2, IndexStep /= 2)
 {
  int Tries[MaxDivs];
  int i;

  for (i = Divs; --i >= 0;)
   Tries[i] = 0;

  for (i = 0; i < Divs - IndexStep; i += IndexStep)
  {
   ComputeFullPath(CK1999Path::K1999);
   double s0 = EstimateSpeed();
   OUTPUT("Optimizing lane number " << i << " / " << Divs << " (pass " << Pass << ")");
   OUTPUT("Reference estimated lap speed = " << s0 << " mph");
   int OldfConst = tfConst[i];
   tfConst[i] = 1;
   double RefLane = tLane[i];
   double BestLane = tLane[i];

   int Dir = -1;
   int j = 0;
   while(1)
   {
    j++;
    double l = RefLane + j * Dir * LaneStep;
    if ((tCurvature[i] > 0 && (l < LaneMinInt || l > LaneMaxExt)) ||
        (tCurvature[i] < 0 && (l > LaneMaxInt || l < LaneMinInt)))
    break;
    tLane[i] = l;
    UpdateTxTy(i);
    ComputeFullPath(CK1999Path::K1999);
    double s = EstimateSpeed();
    OUTPUT("Lane = " << tLane[i] << " Estimated speed = " << s << " mph");
    if (s > s0)
    { 
     BestLane = tLane[i];
     s0 = s;
    }
    else
    {
     if (j == 1 && Dir < 0)
      Dir = 1;
     else 
      break;
     j = 0;
    }
   }
   tLane[i] = BestLane;
   UpdateTxTy(i);
   Tries[i]++;

   if (BestLane == RefLane)
    tfConst[i] = OldfConst;
   else if (Tries[i] <= 5 && i > 0)
    i -= 2 * IndexStep;
  }
 }

 //
 // Write optimized data to file (regardless of WRITE_FILES)
 //
 ofstream ofs("k1999.dat", ios::out | ios::app);
 ofs << ",{\"" << currentTrack->m_sFileName;
 ofs << "\", " << EstimateSpeed();
 ofs << ", " << args.m_iSurface; 
 ofs << ", \"";
 for (int i = 0; i < Divs; i++)
  if (tfConst[i])
   ofs << ' ' << i << ' ' << tLane[i];
 ofs << "\"}\n";
}

/////////////////////////////////////////////////////////////////////////////
// Initialize path data
/////////////////////////////////////////////////////////////////////////////
static void Initialize()
{
 SideDistExt = 4.0;
 SideDistInt = 0.5;
 TireAccel = g * tFriction[args.m_iSurface];
 Track = get_track_description();
 SplitTrack();
 pathK1999.Reset();
 OUTPUT(currentTrack->m_sFileName);

 //
 // Offset distance ??? first segment must be a straight
 //
 {
  double Offset = Track.seg_dist[0] - Track.rgtwall[0].length;
  for (int i = Divs; --i >= 0;)
  {
   tDistance[i] += Offset;
   if (tDistance[i] < 0.0) 
    tDistance[i] += Track.length;
  }
 }

 //
 // Try to get data from the pre-computed array
 //
 int fPreComputed = 0;
 for (int i = sizeof(ttd) / sizeof(*ttd); --i >= 0;)
  if (!strcmp(ttd[i].pszName, currentTrack->m_sFileName) &&
      ttd[i].surface == args.m_iSurface ) // ??? random
  {
   istrstream istr((char *)ttd[i].pszControlPoints);
   while(1)
   {
    int i = 0;
    double l = pathK1999.tLane[i];
    istr >> i >> l;
    if (istr.eof())
     break;
    pathK1999.tLane[i] = l;
    pathK1999.UpdateTxTy(i);
    pathK1999.tfConst[i] = 1;
    if (l < SideDistInt / Track.width || l > 1 - SideDistInt / Track.width)
     OUTPUT("Lane optimization problem");
   }
   OUTPUT("Pre-computed data read");
   fPreComputed = 1;
   break;
  }

 //
 // Path optimization
 //
 {
  OUTPUT("Optimizing K1999 path...");
  if (!fPreComputed)
  {
#ifdef OPTIMIZE
   pathK1999.Optimize();
#else
   OUTPUT("No pre-computed data available !");
   pathK1999.ComputeFullPath(CK1999Path::K1999);
#endif
  }
  else
   pathK1999.ComputeFullPath(CK1999Path::K1999);
  double Speed = pathK1999.EstimateSpeed();
  OUTPUT("Estimated speed = " << Speed);
 }

 //
 // Optionaly write data to file
 //
#ifdef WRITE_FILES
 {
  OUTPUT("Writing output file...");
  ofstream ofs("k1999.path", ios::out);
  pathK1999.DrawPath(ofs);
  OUTPUT("done.");
 }
#endif

#ifdef WRITE_FILES
 //
 // Write data to file
 //
 {
  pathK1999.EstimateSpeed();
  ofstream ofs("k1999.data");
  double PrevDist = 100000000;
  for (int i = Divs + 1; --i >= 0;)
  {
   int j = i % Divs;
   if (tDistance[j] > PrevDist)
    ofs << '\n';
   ofs << tDistance[j];
   ofs << ' ' << pathK1999.tLane[j];
   ofs << ' ' << pathK1999.GetCurvature((j + Divs - 1) % Divs,
                                       pathK1999.tx[j],
                                       pathK1999.ty[j],
                                       (j + 1) % Divs); 
   ofs << ' ' << pathK1999.tx[j];
   ofs << ' ' << pathK1999.ty[j];
   ofs << ' ' << pathK1999.tMaxSpeed[j];
   ofs << ' ' << pathK1999.tSpeed[j];
   ofs << ' ' << pathK1999.tEstimatedSpeed[j];
   ofs << '\n';
   PrevDist = tDistance[j];
  }
  ofs << '\n';
 }
#endif

 //
 // K2001 path
 //
 {
  OUTPUT("Optimizing K2001 path...");
  pathK2001.Reset();
  pathK2001.ComputeFullPath(CK1999Path::K2001);
  double Speed = pathK2001.EstimateSpeed();
  OUTPUT("Average speed = " << Speed);
 }

 //
 // Emergency path
 //
 {
  OUTPUT("Emergency path...");
  SideDistExt = 2 * CARWID;
  SideDistInt = 2 * CARWID;
  pathEmergency.Reset();
  pathEmergency.ComputeFullPath(CK1999Path::K1999);
  double Speed = pathEmergency.EstimateSpeed();
  OUTPUT("Average speed = " << Speed);
 }

}

/////////////////////////////////////////////////////////////////////////////
// Generic class for the two drivers
/////////////////////////////////////////////////////////////////////////////
class KDriver
{
 public:
#ifdef LOG_DATA
  ofstream ofsLog;
#endif
  int fInitialized;
  double PrevV;
  char sName[32];
  const CK1999Path &path;
  int Ind;
  int ID;
  double Distance;
  double CurrentLane, CurrentVn;
  double TargetSpeed, CurrentCurvature;
  double v;
  double PassSide;
  int State;
  double TotalDamage;
  double PrevDamage;
  double TotalFuel;
  double PrevFuel;
  CInterpolationContext ic;
  CInterpolationContext icNext;

  KDriver(char * sNameInit, const CK1999Path &pathInit) :
#ifdef LOG_DATA
   ofsLog((sNameInit + ".log").c_str()),
#endif
   fInitialized(0),
   PrevV(0),
   path(pathInit),
   Ind(0),
   ID(0),
   Distance(0),
   CurrentLane(0),
   CurrentVn(0),
   TargetSpeed(10),
   CurrentCurvature(0),
   v(10),
   PassSide(0),
   State(2),
   TotalDamage(0),
   PrevDamage(0),
   TotalFuel(0),
   PrevFuel(0) 
   {
	  strcpy( sName, sNameInit );
   }


  con_vec Drive(situation &s);
}
K1999Driver("K1999", pathK1999),
K2001Driver("K2001", pathK2001);

/////////////////////////////////////////////////////////////////////////////
// Main driver function
/////////////////////////////////////////////////////////////////////////////
con_vec KDriver::Drive(situation &s)
{
 //
 // Tell our name to the host on the first call
 //
 if (!fInitialized)
 {
  s.side_vision = 1;
  my_name_is(sName);
  fInitialized = 1;
  ID = s.my_ID;
  con_vec result;
  result.alpha = result.vc = 0.0;
  return result;
 }

 //
 // Initialize path data
 //
 {
  static int TrackNumber = -1;
  if( args.m_iCurrentTrack!=TrackNumber && get_track_description().NSEG>0 )
  {
   Initialize();
   TrackNumber = args.m_iCurrentTrack;
  }
 }

 //
 // Find target values in data arrays
 //
 Distance = s.distance;
 ic.SetDistance(Distance);
 double HalfStep = s.v * delta_time * 0.5 * path.GetGamma(ic);
 icNext.SetDistance(Distance + HalfStep);

 CurrentLane = ic.CubicInterpolation(path.tLane);
 CurrentVn = s.v * path.GetTanTheta(ic);
 CurrentCurvature = ic.LinearInterpolation(path.tCurvature);
 TargetSpeed = icNext.LinearInterpolation(path.tSpeed);

 // 
 // Brake to avoid bumping into opponents
 //
 int fPassing = 0;
 int nearbys = 0;
 int aheads = 0;
 const double vDiff = TargetSpeed - s.v;
 for (int i = NEARBY_CARS; --i >= 0;)
  if (s.nearby[i].who < 100)
  {
   nearbys++;
   double x = s.nearby[i].rel_x;
   double y = s.nearby[i].rel_y - CARLEN;
   double vx = s.nearby[i].rel_xdot;
   double vy = s.nearby[i].rel_ydot;
   
   //
   // Adjust x with lateral speed
   //
   double t = Max(-vy / TireAccel, -(y + CARLEN) / vy);
   if (vy < -0.1 && t > 0)
   {
    if (x > 0)
     x = Max(0, x + t * vx);
    else
     x = Min(0, x + t * vx);
   }

   int fOutside = (CurrentCurvature * x < 0);

   //
   // Car ahead
   //
   if (y > 0)
   {
    double v = sqrt(vx * vx + vy * vy);
    double TanAlpha = (v > 10 ? 2.0 : 0.3);
    double dx = y * TanAlpha;
    double xMin = x - dx;
    double xMax = x + dx;
    aheads++;

    double Distance = 1.2 * CARWID;
    if (fOutside)
     Distance *= 2;

    if (xMin < Distance && xMax > -Distance)
    {
     double vNext = Min(s.nearby[i].v, s.v + vy);
     {
      double vCollision = 7.95 * (1 - exp(-y / (2 * CARLEN)));
      double vc2 = vCollision * vCollision - vx * vx;
      if (vc2 > 0)
       vCollision = sqrt(vc2);
      if (vDiff > 0 && vCollision > vDiff)
       vCollision = vDiff;
      vNext += vCollision;
     }
     double MaxSpeed = sqrt(0.80 * 2 * TireAccel * y + vNext * vNext);
     if (TargetSpeed > MaxSpeed)
      TargetSpeed = MaxSpeed;
    }
   }
   else
   {
    if (x * vx < 0 && vy < 0)
     fPassing = 1;
    if (fOutside && fabs(x) < 1.2 * CARWID)
     TargetSpeed = Min(TargetSpeed, s.v - 10);
   }
  }

 //
 // See if we can take the emergency path
 //
 if (s.v > TargetSpeed + 10.0)
 {
  double EmergencySpeed = ic.LinearInterpolation(pathEmergency.tSpeed);
  if (s.v < EmergencySpeed + (s.v - TargetSpeed) / 4)
  {
   CurrentLane = ic.CubicInterpolation(pathEmergency.tLane);
   CurrentVn = s.v * pathEmergency.GetTanTheta(ic);
   CurrentCurvature = ic.LinearInterpolation(pathEmergency.tCurvature);
   TargetSpeed = icNext.LinearInterpolation(pathEmergency.tSpeed);
  }
 }

 //
 // If K1999 is close, let him pass since he is the leader
 //
 State = 2;
 if (race_data.cars[K1999Driver.ID]->Out ||
     race_data.cars[K1999Driver.ID]->On_pit_lane ||
     race_data.cars[K1999Driver.ID]->Coming_from_pits ||
     race_data.cars[K1999Driver.ID]->Pitting)
  K1999Driver.State = 0;
 if (ID == K2001Driver.ID && K1999Driver.State && s.stage != QUALIFYING)
 {
  double Dist = K1999Driver.Distance - Distance;
  if (Dist < -TrackLength / 2)
   Dist += TrackLength;

  if (Dist <= 0 && Dist >= -5 * CARLEN) // K1999 behind
  {
   TargetSpeed = Max(10, TargetSpeed - 2);
   if (PassSide == 0)
    if (K1999Driver.CurrentLane < 0.5)
     PassSide = 1;
    else
     PassSide = -1;
   CurrentLane = K1999Driver.CurrentLane + 3 * PassSide * CARWID / Track.width;
  }
  else if (Dist >= 0 && Dist <= 5 * CARLEN)
   TargetSpeed = Max(10, K1999Driver.v - 10);
 }
 else
  PassSide = 0;

 //
 // Compute normal and tangential acceleration to follow the pre-computed path
 //
 double DeltaL = CurrentLane * Track.width - s.to_lft;

 double Tau = 1.0;
 double D = 20.0;
 if (s.to_lft < 1.0 || s.to_rgt < 1.0)
  Tau /= 5;

 v = s.v;
 if (v < 10)
  v = 10;

 double DeltaTheta = 0;
 if (s.backward)
 {
  if (s.vn < 0)
   DeltaTheta = -1;
  else
   DeltaTheta = +1;
 }
 else
 {
  DeltaTheta = atan(s.vn / v) - atan(CurrentVn / v) +
               atan(DeltaL / (TargetSpeed * Tau));
 }

 const double ZeroAccelV = 0.5 * (s.v + PrevV);
 if (DeltaTheta * CurrentCurvature < 0 &&
     DeltaL * CurrentCurvature < 0 &&
     fabs(DeltaL) > 30 &&
     s.v > 10)
 {
  if (!fPassing)
   D /= 3;
  if (TargetSpeed > ZeroAccelV)
   TargetSpeed = ZeroAccelV;
 }

 double An = s.v * s.v * (CurrentCurvature - DeltaTheta / D);
 double At = (TargetSpeed - ZeroAccelV) / delta_time;
 double mass = M + s.fuel / g;

 if (At > 0)
 {
  double Max2 = TireAccel * TireAccel - An * An;
  if (Max2 > 0)
   At = sqrt(Max2);
  else
   At = 0;
 }

 if (At * At + An * An > TireAccel * TireAccel)
 {
  double x = TireAccel / sqrt(At * At + An * An);
  At *= x;
  An *= x;
 }

 PrevV = s.v;

 //
 // Compute alpha and vc from acceleration values
 //
 con_vec result;
 At = GetControl(At, An, s.v, mass, result);

 //
 // Log data to file
 //
#ifdef LOG_DATA
 {
  ofsLog << s.v << ' ';
  ofsLog << TargetSpeed << ' ';
  ofsLog << DeltaL << ' ';
  ofsLog << s.vn - CurrentVn << ' ';
  ofsLog << At << ' ';
  ofsLog << An << ' ';
  ofsLog << sqrt(An * An + At * At) << ' ';
  ofsLog << result.alpha << ' ';
  ofsLog << result.vc << ' ';
  ofsLog << InverseFriction(sqrt(An * An + At * At) /g) << ' ';
  ofsLog << s.seg_ID << ' ';
  double CurrentEstimatedSpeed = ic.LinearInterpolation(path.tEstimatedSpeed);
  ofsLog << CurrentEstimatedSpeed << ' ';
  ofsLog << CurrentCurvature << ' ';
  ofsLog << DeltaTheta << ' ';
  ofsLog << '\n';
 }
#endif

 //
 // Accumulate stats for pitting strategy
 //
 if (s.starting)
 {
  TotalDamage = 0;
  TotalFuel = 0;
 }
 else
 {
  if (s.damage > PrevDamage)
   TotalDamage += s.damage - PrevDamage;
  if (PrevFuel > s.fuel)
   TotalFuel += PrevFuel - s.fuel;
 }
 PrevDamage = s.damage;
 PrevFuel = s.fuel;

 //
 // Pitting strategy
 //
 if (s.stage != QUALIFYING)
 {
  const double DamageLimit = 12500;
  const double ExtremeDamageLimit = 20000;
  const double FuelSecurity = 5.0;
  const double Fuel = s.fuel - FuelSecurity;
  const double LapsDone = Max(0.1, s.laps_done + s.distance / Track.length);
  const double LapsToGo = s.laps_to_go - s.distance / Track.length;
  const double DamagePerLap = TotalDamage / LapsDone;
  const double FuelPerLap = TotalFuel / LapsDone;
  const double FuelToEnd = LapsToGo * FuelPerLap;

  result.fuel_amount = FuelToEnd + 2 * FuelSecurity;
  result.repair_amount = int(s.damage + LapsToGo * DamagePerLap - DamageLimit);
  if (result.repair_amount < result.fuel_amount * 10)
   result.repair_amount = int(result.fuel_amount * 10);

  result.request_pit = 0;
  if (LapsDone > 1 && LapsToGo > 1 && Fuel < FuelPerLap) // pit for fuel
   result.request_pit = 1;
  else if (s.damage > DamageLimit) // pit for repair
  {
   int PitStopsGoOn = (Fuel > FuelToEnd) ?
                      0 :
                      1 + int((FuelToEnd - Fuel) / (MAX_FUEL - FuelSecurity));
   int PitStopsPit = 1 + int(FuelToEnd / (MAX_FUEL - FuelSecurity));
   if (PitStopsPit <= PitStopsGoOn || s.damage > ExtremeDamageLimit)
    result.request_pit = 1;
  }
 }

 //
 // Fuel amount at startup
 //
 if (s.starting)
  if (s.stage == QUALIFYING)
   result.fuel_amount = 20;
  else
   result.fuel_amount = MAX_FUEL;

 return result;
}

/////////////////////////////////////////////////////////////////////////////
// One function for each car
/////////////////////////////////////////////////////////////////////////////
con_vec K2001(situation &s)
{
 if (K1999Driver.State > 0)
  K1999Driver.State--;
 return K2001Driver.Drive(s);
}

con_vec K1999(situation &s)
{
 return K1999Driver.Drive(s);
}
